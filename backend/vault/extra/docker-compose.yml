# docker-compose for vault, allows to bring up a temporary vault installation
# for local use and testing with rclone. Nothing persists beyond the
# containers.
#
# $ docker-compose up
#
# Once running, you should be able to go to http://localhost:8000 and login.
#
# Note: Since the addition of elasticsearch, we may need 8GB or more RAM to run.

version: "3.5"

services:
  web:
    image: vault
    ports:
      - "8000:8000"
    expose:
      - "8000"
    depends_on:
      - postgres
      - temporal
      - elasticsearch
    environment:
      - ALLOWED_HOSTS="*"
      - WAIT_TIMEOUT=60 # 30 worked before we added elasticsearch
      - WAIT_HOSTS=postgres:5432, temporal:7233, elasticsearch:9200 # https://github.com/ufoscout/docker-compose-wait
      - VAULT_POSTGRES_HOST=postgres
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      - SEARCH_INDEXER_POLL_INTERVAL_SECS=600
      # TODO: does this affect the bucket creation and access?
      - MINIO_ROOT_USER=${S3_CHUNK_MANAGER_S3_ACCESS_KEY:-accesskey}
      - MINIO_ROOT_PASSWORD=${S3_CHUNK_MANAGER_S3_SECRET_KEY:-secretkey}
      # taken from Dockerfile, but most values are set in this file ----8<----
      - REDIS_HOST=redis
      - TEMPORAL_FRONTEND_URI=temporal:7233
      - CELERY_BROKER_URI=amqp://vault:vault@rabbitmq:5672/
      - PROMETHEUS_MULTIPROC_DIR=/tmp
      # storage related
      - PRIMARY_STORAGE_MANAGER=USCAS301
      - GLOBAL_DEFAULT_REPLICA_LOCATIONS=USCAS301
      - S3_CHUNK_MANAGER_S3_ENDPOINT=http://minio:9000
      - S3_STORAGE_MANAGER_USCAS301_S3_ENDPOINT=http://minio:9000
      - S3_STORAGE_MANAGER_USCAS301_S3_ACCESS_KEY=accesskey
      - S3_STORAGE_MANAGER_USCAS301_S3_SECRET_KEY=secretkey
      - S3_STORAGE_MANAGER_USCAS301_S3_BUCKET=s3storagemanagerdevstorage
      - CHUNK_MANAGER_TYPE=LOCALFS
      - ASYNC_MODE=TEMPORAL
    tty: true
    stdin_open: true
  minio:
    image: minio/minio:RELEASE.2024-04-06T05-26-02Z
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${S3_CHUNK_MANAGER_S3_ACCESS_KEY:-accesskey}
      - MINIO_ROOT_PASSWORD=${S3_CHUNK_MANAGER_S3_SECRET_KEY:-secretkey}
    ports:
      - "9000:9000"
      - "9001:9001"
    expose:
      - "9000"
      - "9001"
    tty: true
    stdin_open: true
  rabbitmq:
    image: rabbitmq:3.8-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-vault}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-vault}
    ports:
      - "5672:5672"
      - "15672:15672"
    expose:
      - "5672"
      - "15672"
    tty: true
    stdin_open: true
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-vault}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-vault}
    ports:
      - "5432:5432"
    expose:
      - "5432"
  redis:
    image: redis:7.0.2
    ports:
      - "6379:6379"
    expose:
      - "6379"
    tty: true
    stdin_open: true

  # temporal bits borrowed from: https://github.com/temporalio/docker-compose
  # To determine the latest versions of the temporal containers,
  # see: https://github.com/temporalio/docker-compose/blob/main/.env
  temporal:
    container_name: temporal
    depends_on:
      - postgres
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-vault}
      - POSTGRES_PWD=${POSTGRES_PASSWORD:-vault}
      - POSTGRES_SEEDS=postgres
      # - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup:${TEMPORAL_VERSION:-1.18.5}
    ports:
      - "7233:7233"
    tty: true
    stdin_open: true
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION:-1.21.4}
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION:-2.17.1}
    ports:
      - "8080:8080"
    expose:
      - "8080"
    tty: true
    stdin_open: true
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.16.1
    environment:
      - "ES_JAVA_OPTS=-Xms4G -Xmx4G"
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ELASTICSEARCH_REQUESTTIMEOUT=120000
    ports:
      - "9200:9200"
      - "9300:9300"
    expose:
      - "9200"
      - "9300"
    tmpfs:
      - /var/lib/elasticsearch:exec,size=2G
    tty: true
    stdin_open: true

