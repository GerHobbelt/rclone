// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for DefaultFixityFrequencyEnum.
const (
	DefaultFixityFrequencyEnumMONTHLY     DefaultFixityFrequencyEnum = "MONTHLY"
	DefaultFixityFrequencyEnumQUARTERLY   DefaultFixityFrequencyEnum = "QUARTERLY"
	DefaultFixityFrequencyEnumTWICEYEARLY DefaultFixityFrequencyEnum = "TWICE_YEARLY"
)

// Defines values for DefaultReplicationEnum.
const (
	DefaultReplicationEnumN2 DefaultReplicationEnum = 2
	DefaultReplicationEnumN3 DefaultReplicationEnum = 3
	DefaultReplicationEnumN4 DefaultReplicationEnum = 4
)

// Defines values for FixityFrequencyEnum.
const (
	FixityFrequencyEnumMONTHLY     FixityFrequencyEnum = "MONTHLY"
	FixityFrequencyEnumQUARTERLY   FixityFrequencyEnum = "QUARTERLY"
	FixityFrequencyEnumTWICEYEARLY FixityFrequencyEnum = "TWICE_YEARLY"
)

// Defines values for NodeTypeEnum.
const (
	NodeTypeEnumCOLLECTION   NodeTypeEnum = "COLLECTION"
	NodeTypeEnumFILE         NodeTypeEnum = "FILE"
	NodeTypeEnumFOLDER       NodeTypeEnum = "FOLDER"
	NodeTypeEnumORGANIZATION NodeTypeEnum = "ORGANIZATION"
)

// Defines values for ReportTypeEnum.
const (
	ReportTypeEnumDEPOSIT ReportTypeEnum = "DEPOSIT"
	ReportTypeEnumFIXITY  ReportTypeEnum = "FIXITY"
)

// Defines values for RoleEnum.
const (
	RoleEnumADMIN  RoleEnum = "ADMIN"
	RoleEnumUSER   RoleEnum = "USER"
	RoleEnumVIEWER RoleEnum = "VIEWER"
)

// Defines values for StateEnum.
const (
	StateEnumCOMPLETEWITHERRORS StateEnum = "COMPLETE_WITH_ERRORS"
	StateEnumHASHED             StateEnum = "HASHED"
	StateEnumREGISTERED         StateEnum = "REGISTERED"
	StateEnumREPLICATED         StateEnum = "REPLICATED"
	StateEnumTERMINATEDBYUSER   StateEnum = "TERMINATED_BY_USER"
	StateEnumUPLOADED           StateEnum = "UPLOADED"
)

// Defines values for TargetReplicationEnum.
const (
	TargetReplicationEnumN2 TargetReplicationEnum = 2
	TargetReplicationEnumN3 TargetReplicationEnum = 3
	TargetReplicationEnumN4 TargetReplicationEnum = 4
)

// Defines values for TypeEnum.
const (
	TypeEnumDEPOSIT TypeEnum = "DEPOSIT"
	TypeEnumFIXITY  TypeEnum = "FIXITY"
)

// Defines values for UploadStateEnum.
const (
	UploadStateEnumCOMPLETEWITHERRORS UploadStateEnum = "COMPLETE_WITH_ERRORS"
	UploadStateEnumHASHED             UploadStateEnum = "HASHED"
	UploadStateEnumREGISTERED         UploadStateEnum = "REGISTERED"
	UploadStateEnumREPLICATED         UploadStateEnum = "REPLICATED"
	UploadStateEnumTERMINATEDBYUSER   UploadStateEnum = "TERMINATED_BY_USER"
	UploadStateEnumUPLOADED           UploadStateEnum = "UPLOADED"
)

// Defines values for CollectionsListParamsFixityFrequency.
const (
	CollectionsListParamsFixityFrequencyMONTHLY     CollectionsListParamsFixityFrequency = "MONTHLY"
	CollectionsListParamsFixityFrequencyQUARTERLY   CollectionsListParamsFixityFrequency = "QUARTERLY"
	CollectionsListParamsFixityFrequencyTWICEYEARLY CollectionsListParamsFixityFrequency = "TWICE_YEARLY"
)

// Defines values for CollectionsListParamsTargetReplication.
const (
	CollectionsListParamsTargetReplicationN2 CollectionsListParamsTargetReplication = 2
	CollectionsListParamsTargetReplicationN3 CollectionsListParamsTargetReplication = 3
	CollectionsListParamsTargetReplicationN4 CollectionsListParamsTargetReplication = 4
)

// Defines values for DepositsListParamsState.
const (
	DepositsListParamsStateCOMPLETEWITHERRORS DepositsListParamsState = "COMPLETE_WITH_ERRORS"
	DepositsListParamsStateHASHED             DepositsListParamsState = "HASHED"
	DepositsListParamsStateREGISTERED         DepositsListParamsState = "REGISTERED"
	DepositsListParamsStateREPLICATED         DepositsListParamsState = "REPLICATED"
	DepositsListParamsStateTERMINATEDBYUSER   DepositsListParamsState = "TERMINATED_BY_USER"
	DepositsListParamsStateUPLOADED           DepositsListParamsState = "UPLOADED"
)

// Defines values for EventsListParamsType.
const (
	EventsListParamsTypeDEPOSIT EventsListParamsType = "DEPOSIT"
	EventsListParamsTypeFIXITY  EventsListParamsType = "FIXITY"
)

// Defines values for EventsListParamsUploadState.
const (
	EventsListParamsUploadStateCOMPLETEWITHERRORS EventsListParamsUploadState = "COMPLETE_WITH_ERRORS"
	EventsListParamsUploadStateHASHED             EventsListParamsUploadState = "HASHED"
	EventsListParamsUploadStateREGISTERED         EventsListParamsUploadState = "REGISTERED"
	EventsListParamsUploadStateREPLICATED         EventsListParamsUploadState = "REPLICATED"
	EventsListParamsUploadStateTERMINATEDBYUSER   EventsListParamsUploadState = "TERMINATED_BY_USER"
	EventsListParamsUploadStateUPLOADED           EventsListParamsUploadState = "UPLOADED"
)

// Defines values for PlansListParamsDefaultFixityFrequency.
const (
	PlansListParamsDefaultFixityFrequencyMONTHLY     PlansListParamsDefaultFixityFrequency = "MONTHLY"
	PlansListParamsDefaultFixityFrequencyQUARTERLY   PlansListParamsDefaultFixityFrequency = "QUARTERLY"
	PlansListParamsDefaultFixityFrequencyTWICEYEARLY PlansListParamsDefaultFixityFrequency = "TWICE_YEARLY"
)

// Defines values for PlansListParamsDefaultReplication.
const (
	PlansListParamsDefaultReplicationN2 PlansListParamsDefaultReplication = 2
	PlansListParamsDefaultReplicationN3 PlansListParamsDefaultReplication = 3
	PlansListParamsDefaultReplicationN4 PlansListParamsDefaultReplication = 4
)

// Defines values for ReportsListParamsReportType.
const (
	ReportsListParamsReportTypeDEPOSIT ReportsListParamsReportType = "DEPOSIT"
	ReportsListParamsReportTypeFIXITY  ReportsListParamsReportType = "FIXITY"
)

// Defines values for TreenodesListParamsNodeType.
const (
	TreenodesListParamsNodeTypeCOLLECTION   TreenodesListParamsNodeType = "COLLECTION"
	TreenodesListParamsNodeTypeFILE         TreenodesListParamsNodeType = "FILE"
	TreenodesListParamsNodeTypeFOLDER       TreenodesListParamsNodeType = "FOLDER"
	TreenodesListParamsNodeTypeORGANIZATION TreenodesListParamsNodeType = "ORGANIZATION"
)

// Defines values for UsersListParamsRole.
const (
	UsersListParamsRoleADMIN  UsersListParamsRole = "ADMIN"
	UsersListParamsRoleUSER   UsersListParamsRole = "USER"
	UsersListParamsRoleVIEWER UsersListParamsRole = "VIEWER"
)

// Collection defines model for Collection.
type Collection struct {
	// FixityFrequency * `TWICE_YEARLY` - Twice Yearly
	// * `QUARTERLY` - Quarterly
	// * `MONTHLY` - Monthly
	FixityFrequency   *FixityFrequencyEnum   `json:"fixity_frequency,omitempty"`
	Id                *int                   `json:"id,omitempty"`
	Name              string                 `json:"name"`
	Organization      string                 `json:"organization"`
	TargetReplication *TargetReplicationEnum `json:"target_replication,omitempty"`
	TreeNode          *string                `json:"tree_node"`
	Url               *string                `json:"url,omitempty"`
}

// CollectionRequest defines model for CollectionRequest.
type CollectionRequest struct {
	// FixityFrequency * `TWICE_YEARLY` - Twice Yearly
	// * `QUARTERLY` - Quarterly
	// * `MONTHLY` - Monthly
	FixityFrequency   *FixityFrequencyEnum   `json:"fixity_frequency,omitempty"`
	Name              string                 `json:"name"`
	Organization      string                 `json:"organization"`
	TargetReplication *TargetReplicationEnum `json:"target_replication,omitempty"`
	TreeNode          *string                `json:"tree_node"`
}

// CollectionSummary defines model for CollectionSummary.
type CollectionSummary struct {
	// FixityFrequency * `TWICE_YEARLY` - Twice Yearly
	// * `QUARTERLY` - Quarterly
	// * `MONTHLY` - Monthly
	FixityFrequency        FixityFrequencyEnum     `json:"fixity_frequency"`
	Name                   string                  `json:"name"`
	SizeBytes              int                     `json:"size_bytes"`
	TargetReplicaLocations []ReplicaLocationConfig `json:"target_replica_locations"`
}

// DefaultFixityFrequencyEnum * `TWICE_YEARLY` - Twice Yearly
// * `QUARTERLY` - Quarterly
// * `MONTHLY` - Monthly
type DefaultFixityFrequencyEnum string

// DefaultReplicationEnum * `2` - 2x
// * `3` - 3x
// * `4` - 4x
type DefaultReplicationEnum int

// Deposit defines model for Deposit.
type Deposit struct {
	Collection   *MinimalCollection `json:"collection,omitempty"`
	HashedAt     *time.Time         `json:"hashed_at"`
	Id           *int               `json:"id,omitempty"`
	Organization string             `json:"organization"`
	ParentNode   string             `json:"parent_node"`
	RegisteredAt *time.Time         `json:"registered_at,omitempty"`
	ReplicatedAt *time.Time         `json:"replicated_at"`

	// State * `REGISTERED` - Registered
	// * `UPLOADED` - Uploaded
	// * `HASHED` - Hashed
	// * `REPLICATED` - Replicated
	// * `COMPLETE_WITH_ERRORS` - Complete With Errors
	// * `TERMINATED_BY_USER` - Terminated by user action
	State      *StateEnum   `json:"state,omitempty"`
	UploadedAt *time.Time   `json:"uploaded_at"`
	User       *MinimalUser `json:"user,omitempty"`
}

// Event defines model for Event.
type Event struct {
	Collection *MinimalCollection `json:"collection,omitempty"`
	EndedAt    *time.Time         `json:"ended_at"`
	ErrorCount *int64             `json:"error_count"`
	FileCount  *int64             `json:"file_count"`
	Id         *int               `json:"id,omitempty"`
	StartedAt  *time.Time         `json:"started_at"`

	// Type * `DEPOSIT` - Deposit
	// * `FIXITY` - Fixity
	Type *TypeEnum `json:"type,omitempty"`

	// UploadState * `REGISTERED` - Registered
	// * `UPLOADED` - Uploaded
	// * `HASHED` - Hashed
	// * `REPLICATED` - Replicated
	// * `COMPLETE_WITH_ERRORS` - Complete With Errors
	// * `TERMINATED_BY_USER` - Terminated by user action
	UploadState UploadStateEnum `json:"upload_state"`
	Url         *string         `json:"url,omitempty"`
}

// FixityFrequencyEnum * `TWICE_YEARLY` - Twice Yearly
// * `QUARTERLY` - Quarterly
// * `MONTHLY` - Monthly
type FixityFrequencyEnum string

// MinimalCollection defines model for MinimalCollection.
type MinimalCollection struct {
	Id   *int    `json:"id,omitempty"`
	Name string  `json:"name"`
	Url  *string `json:"url,omitempty"`
}

// MinimalUser defines model for MinimalUser.
type MinimalUser struct {
	Id  *int    `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// NodeTypeEnum * `FILE` - File
// * `FOLDER` - Folder
// * `COLLECTION` - Collection
// * `ORGANIZATION` - Organization
type NodeTypeEnum string

// Organization defines model for Organization.
type Organization struct {
	Name       string  `json:"name"`
	Plan       string  `json:"plan"`
	QuotaBytes *int64  `json:"quota_bytes,omitempty"`
	TreeNode   *string `json:"tree_node"`
	Url        *string `json:"url,omitempty"`
}

// PaginatedCollectionList defines model for PaginatedCollectionList.
type PaginatedCollectionList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]Collection `json:"results,omitempty"`
}

// PaginatedCollectionSummaryList defines model for PaginatedCollectionSummaryList.
type PaginatedCollectionSummaryList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]CollectionSummary `json:"results,omitempty"`
}

// PaginatedDepositList defines model for PaginatedDepositList.
type PaginatedDepositList struct {
	Count    *int       `json:"count,omitempty"`
	Next     *string    `json:"next"`
	Previous *string    `json:"previous"`
	Results  *[]Deposit `json:"results,omitempty"`
}

// PaginatedEventList defines model for PaginatedEventList.
type PaginatedEventList struct {
	Count    *int     `json:"count,omitempty"`
	Next     *string  `json:"next"`
	Previous *string  `json:"previous"`
	Results  *[]Event `json:"results,omitempty"`
}

// PaginatedOrganizationList defines model for PaginatedOrganizationList.
type PaginatedOrganizationList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]Organization `json:"results,omitempty"`
}

// PaginatedPlanList defines model for PaginatedPlanList.
type PaginatedPlanList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]Plan `json:"results,omitempty"`
}

// PaginatedReportList defines model for PaginatedReportList.
type PaginatedReportList struct {
	Count    *int      `json:"count,omitempty"`
	Next     *string   `json:"next"`
	Previous *string   `json:"previous"`
	Results  *[]Report `json:"results,omitempty"`
}

// PaginatedTreeNodeList defines model for PaginatedTreeNodeList.
type PaginatedTreeNodeList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]TreeNode `json:"results,omitempty"`
}

// PaginatedUserList defines model for PaginatedUserList.
type PaginatedUserList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]User `json:"results,omitempty"`
}

// PatchedCollectionRequest defines model for PatchedCollectionRequest.
type PatchedCollectionRequest struct {
	// FixityFrequency * `TWICE_YEARLY` - Twice Yearly
	// * `QUARTERLY` - Quarterly
	// * `MONTHLY` - Monthly
	FixityFrequency   *FixityFrequencyEnum   `json:"fixity_frequency,omitempty"`
	Name              *string                `json:"name,omitempty"`
	Organization      *string                `json:"organization,omitempty"`
	TargetReplication *TargetReplicationEnum `json:"target_replication,omitempty"`
	TreeNode          *string                `json:"tree_node"`
}

// PatchedTreeNodeRequest defines model for PatchedTreeNodeRequest.
type PatchedTreeNodeRequest struct {
	Comment  *string                 `json:"comment"`
	FileType *string                 `json:"file_type"`
	Md5Sum   *string                 `json:"md5_sum"`
	Metadata *map[string]interface{} `json:"metadata"`
	Name     *string                 `json:"name,omitempty"`

	// NodeType * `FILE` - File
	// * `FOLDER` - Folder
	// * `COLLECTION` - Collection
	// * `ORGANIZATION` - Organization
	NodeType             *NodeTypeEnum `json:"node_type,omitempty"`
	Parent               *string       `json:"parent"`
	PreDepositModifiedAt *time.Time    `json:"pre_deposit_modified_at"`
	Sha1Sum              *string       `json:"sha1_sum"`
	Sha256Sum            *string       `json:"sha256_sum"`
	Size                 *int64        `json:"size"`
	UploadedAt           *time.Time    `json:"uploaded_at"`
}

// PatchedUserRequest defines model for PatchedUserRequest.
type PatchedUserRequest struct {
	AuthorizedCollections *[]string            `json:"authorized_collections,omitempty"`
	DateJoined            *time.Time           `json:"date_joined,omitempty"`
	Email                 *openapi_types.Email `json:"email,omitempty"`
	FirstName             *string              `json:"first_name,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsStaff Designates whether the user can log into this admin site.
	IsStaff *bool `json:"is_staff,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser  *bool      `json:"is_superuser,omitempty"`
	LastLogin    *time.Time `json:"last_login"`
	LastName     *string    `json:"last_name,omitempty"`
	Organization *string    `json:"organization"`

	// Role * `ADMIN` - Admin
	// * `USER` - User
	// * `VIEWER` - Viewer
	Role *RoleEnum `json:"role,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username *string `json:"username,omitempty"`
}

// Plan defines model for Plan.
type Plan struct {
	// DefaultFixityFrequency * `TWICE_YEARLY` - Twice Yearly
	// * `QUARTERLY` - Quarterly
	// * `MONTHLY` - Monthly
	DefaultFixityFrequency *DefaultFixityFrequencyEnum `json:"default_fixity_frequency,omitempty"`
	DefaultReplication     *DefaultReplicationEnum     `json:"default_replication,omitempty"`
	Name                   string                      `json:"name"`
	PricePerTerabyte       string                      `json:"price_per_terabyte"`
	Url                    *string                     `json:"url,omitempty"`
}

// ReplicaLocationConfig defines model for ReplicaLocationConfig.
type ReplicaLocationConfig struct {
	Abbreviation      string `json:"abbreviation"`
	DisplayName       string `json:"display_name"`
	NumCopies         int    `json:"num_copies"`
	PhysicalLocation  string `json:"physical_location"`
	SystemDescription string `json:"system_description"`
}

// Report defines model for Report.
type Report struct {
	Collection          *MinimalCollection `json:"collection,omitempty"`
	CollectionFileCount int64              `json:"collection_file_count"`
	CollectionTotalSize int64              `json:"collection_total_size"`
	CollectionTreeNode  int                `json:"collection_tree_node"`
	EndedAt             time.Time          `json:"ended_at"`
	ErrorCount          int64              `json:"error_count"`
	FileCount           int64              `json:"file_count"`
	Id                  *int               `json:"id,omitempty"`

	// ReportType * `FIXITY` - Fixity
	// * `DEPOSIT` - Deposit
	ReportType *ReportTypeEnum `json:"report_type,omitempty"`
	StartedAt  time.Time       `json:"started_at"`
	Title      string          `json:"title"`
	TotalSize  int64           `json:"total_size"`
	Url        *string         `json:"url,omitempty"`
}

// ReportTypeEnum * `FIXITY` - Fixity
// * `DEPOSIT` - Deposit
type ReportTypeEnum string

// RoleEnum * `ADMIN` - Admin
// * `USER` - User
// * `VIEWER` - Viewer
type RoleEnum string

// StateEnum * `REGISTERED` - Registered
// * `UPLOADED` - Uploaded
// * `HASHED` - Hashed
// * `REPLICATED` - Replicated
// * `COMPLETE_WITH_ERRORS` - Complete With Errors
// * `TERMINATED_BY_USER` - Terminated by user action
type StateEnum string

// TargetReplicationEnum * `2` - 2x
// * `3` - 3x
// * `4` - 4x
type TargetReplicationEnum int

// TreeNode defines model for TreeNode.
type TreeNode struct {
	Comment *string `json:"comment"`

	// ContentUrl Generates a URL for downloading the content of this *TreeNode*.
	//
	// Returns ``None`` if this *TreeNode* is not of *node_type* *FILE* or if
	// content isn't downloadable.
	//
	// .. note::
	//
	//     As of ``0.4.0``, the implementation depends on content being
	//     present in a petabox-backed :py:class:`.Replica`. In the future,
	//     downloads should be resolvable from any :py:class:`.Replica`,
	//     regardless of the storage backend used, provided said replica(s)
	//     have a healthy recent :py:class:`.FixityCheck`.
	//
	//     Another note: a database query is required to resolve the url, which
	//     is unfortunate; ideally the requisite data for generating content
	//     urls should be resolvable for a page of :py:class:`.TreeNode`s in a
	//     constant number of queries. It's not clear to me (mwilson) right
	//     now whether this is possible or reasonable, but if performance
	//     problems arise because of excessive queries, this could be an area
	//     for investigation.
	ContentUrl *string                 `json:"content_url"`
	FileType   *string                 `json:"file_type"`
	Id         *int                    `json:"id,omitempty"`
	Md5Sum     *string                 `json:"md5_sum"`
	Metadata   *map[string]interface{} `json:"metadata"`
	ModifiedAt *time.Time              `json:"modified_at"`
	Name       string                  `json:"name"`

	// NodeType * `FILE` - File
	// * `FOLDER` - Folder
	// * `COLLECTION` - Collection
	// * `ORGANIZATION` - Organization
	NodeType             *NodeTypeEnum `json:"node_type,omitempty"`
	Parent               *string       `json:"parent"`
	Path                 *string       `json:"path"`
	PreDepositModifiedAt *time.Time    `json:"pre_deposit_modified_at"`
	Sha1Sum              *string       `json:"sha1_sum"`
	Sha256Sum            *string       `json:"sha256_sum"`
	Size                 *int64        `json:"size"`
	UploadedAt           *time.Time    `json:"uploaded_at"`
	UploadedBy           *MinimalUser  `json:"uploaded_by,omitempty"`
	Url                  *string       `json:"url,omitempty"`
}

// TreeNodeRequest defines model for TreeNodeRequest.
type TreeNodeRequest struct {
	Comment  *string                 `json:"comment"`
	FileType *string                 `json:"file_type"`
	Md5Sum   *string                 `json:"md5_sum"`
	Metadata *map[string]interface{} `json:"metadata"`
	Name     string                  `json:"name"`

	// NodeType * `FILE` - File
	// * `FOLDER` - Folder
	// * `COLLECTION` - Collection
	// * `ORGANIZATION` - Organization
	NodeType             *NodeTypeEnum `json:"node_type,omitempty"`
	Parent               *string       `json:"parent"`
	PreDepositModifiedAt *time.Time    `json:"pre_deposit_modified_at"`
	Sha1Sum              *string       `json:"sha1_sum"`
	Sha256Sum            *string       `json:"sha256_sum"`
	Size                 *int64        `json:"size"`
	UploadedAt           *time.Time    `json:"uploaded_at"`
}

// TypeEnum * `DEPOSIT` - Deposit
// * `FIXITY` - Fixity
type TypeEnum string

// UploadStateEnum * `REGISTERED` - Registered
// * `UPLOADED` - Uploaded
// * `HASHED` - Hashed
// * `REPLICATED` - Replicated
// * `COMPLETE_WITH_ERRORS` - Complete With Errors
// * `TERMINATED_BY_USER` - Terminated by user action
type UploadStateEnum string

// User defines model for User.
type User struct {
	AuthorizedCollections *[]string           `json:"authorized_collections,omitempty"`
	DateJoined            *time.Time          `json:"date_joined,omitempty"`
	Email                 openapi_types.Email `json:"email"`
	FirstName             *string             `json:"first_name,omitempty"`
	Id                    *int                `json:"id,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsStaff Designates whether the user can log into this admin site.
	IsStaff *bool `json:"is_staff,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser  *bool      `json:"is_superuser,omitempty"`
	LastLogin    *time.Time `json:"last_login"`
	LastName     *string    `json:"last_name,omitempty"`
	Organization *string    `json:"organization"`

	// Role * `ADMIN` - Admin
	// * `USER` - User
	// * `VIEWER` - Viewer
	Role *RoleEnum `json:"role,omitempty"`
	Url  *string   `json:"url,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	AuthorizedCollections *[]string           `json:"authorized_collections,omitempty"`
	DateJoined            *time.Time          `json:"date_joined,omitempty"`
	Email                 openapi_types.Email `json:"email"`
	FirstName             *string             `json:"first_name,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsStaff Designates whether the user can log into this admin site.
	IsStaff *bool `json:"is_staff,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser  *bool      `json:"is_superuser,omitempty"`
	LastLogin    *time.Time `json:"last_login"`
	LastName     *string    `json:"last_name,omitempty"`
	Organization *string    `json:"organization"`

	// Role * `ADMIN` - Admin
	// * `USER` - User
	// * `VIEWER` - Viewer
	Role *RoleEnum `json:"role,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// CollectionSummariesListParams defines parameters for CollectionSummariesList.
type CollectionSummariesListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// CollectionsListParams defines parameters for CollectionsList.
type CollectionsListParams struct {
	// Flat Create a flat array from plucked field values
	Flat *string `form:"_flat,omitempty" json:"_flat,omitempty"`

	// Pluck A subset of response item fields to include
	Pluck *string `form:"_pluck,omitempty" json:"_pluck,omitempty"`

	// FixityFrequency * `TWICE_YEARLY` - Twice Yearly
	// * `QUARTERLY` - Quarterly
	// * `MONTHLY` - Monthly
	FixityFrequency          *CollectionsListParamsFixityFrequency `form:"fixity_frequency,omitempty" json:"fixity_frequency,omitempty"`
	FixityFrequencyContains  *string                               `form:"fixity_frequency__contains,omitempty" json:"fixity_frequency__contains,omitempty"`
	FixityFrequencyEndswith  *string                               `form:"fixity_frequency__endswith,omitempty" json:"fixity_frequency__endswith,omitempty"`
	FixityFrequencyIcontains *string                               `form:"fixity_frequency__icontains,omitempty" json:"fixity_frequency__icontains,omitempty"`
	FixityFrequencyIexact    *string                               `form:"fixity_frequency__iexact,omitempty" json:"fixity_frequency__iexact,omitempty"`

	// FixityFrequencyIn Multiple values may be separated by commas.
	FixityFrequencyIn         *[]string `form:"fixity_frequency__in,omitempty" json:"fixity_frequency__in,omitempty"`
	FixityFrequencyStartswith *string   `form:"fixity_frequency__startswith,omitempty" json:"fixity_frequency__startswith,omitempty"`
	Id                        *int      `form:"id,omitempty" json:"id,omitempty"`
	IdGt                      *int      `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte                     *int      `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn  *[]int `form:"id__in,omitempty" json:"id__in,omitempty"`
	IdLt  *int   `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte *int   `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// Limit Number of results to return per page.
	Limit         *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name          *string `form:"name,omitempty" json:"name,omitempty"`
	NameContains  *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`
	NameEndswith  *string `form:"name__endswith,omitempty" json:"name__endswith,omitempty"`
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIexact    *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Multiple values may be separated by commas.
	NameIn         *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`
	NameStartswith *string   `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering     *string `form:"ordering,omitempty" json:"ordering,omitempty"`
	Organization *int    `form:"organization,omitempty" json:"organization,omitempty"`

	// OrganizationIn Multiple values may be separated by commas.
	OrganizationIn *[]int `form:"organization__in,omitempty" json:"organization__in,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// TargetReplication * `2` - 2x
	// * `3` - 3x
	// * `4` - 4x
	TargetReplication    *CollectionsListParamsTargetReplication `form:"target_replication,omitempty" json:"target_replication,omitempty"`
	TargetReplicationGt  *int                                    `form:"target_replication__gt,omitempty" json:"target_replication__gt,omitempty"`
	TargetReplicationGte *int                                    `form:"target_replication__gte,omitempty" json:"target_replication__gte,omitempty"`

	// TargetReplicationIn Multiple values may be separated by commas.
	TargetReplicationIn  *[]int `form:"target_replication__in,omitempty" json:"target_replication__in,omitempty"`
	TargetReplicationLt  *int   `form:"target_replication__lt,omitempty" json:"target_replication__lt,omitempty"`
	TargetReplicationLte *int   `form:"target_replication__lte,omitempty" json:"target_replication__lte,omitempty"`
	TreeNode             *int   `form:"tree_node,omitempty" json:"tree_node,omitempty"`
}

// CollectionsListParamsFixityFrequency defines parameters for CollectionsList.
type CollectionsListParamsFixityFrequency string

// CollectionsListParamsTargetReplication defines parameters for CollectionsList.
type CollectionsListParamsTargetReplication int

// DepositsListParams defines parameters for DepositsList.
type DepositsListParams struct {
	// Flat Create a flat array from plucked field values
	Flat *string `form:"_flat,omitempty" json:"_flat,omitempty"`

	// Pluck A subset of response item fields to include
	Pluck      *string `form:"_pluck,omitempty" json:"_pluck,omitempty"`
	Collection *int    `form:"collection,omitempty" json:"collection,omitempty"`

	// CollectionIn Multiple values may be separated by commas.
	CollectionIn *[]int     `form:"collection__in,omitempty" json:"collection__in,omitempty"`
	HashedAt     *time.Time `form:"hashed_at,omitempty" json:"hashed_at,omitempty"`
	HashedAtGt   *time.Time `form:"hashed_at__gt,omitempty" json:"hashed_at__gt,omitempty"`
	HashedAtGte  *time.Time `form:"hashed_at__gte,omitempty" json:"hashed_at__gte,omitempty"`

	// HashedAtIn Multiple values may be separated by commas.
	HashedAtIn  *[]time.Time `form:"hashed_at__in,omitempty" json:"hashed_at__in,omitempty"`
	HashedAtLt  *time.Time   `form:"hashed_at__lt,omitempty" json:"hashed_at__lt,omitempty"`
	HashedAtLte *time.Time   `form:"hashed_at__lte,omitempty" json:"hashed_at__lte,omitempty"`
	Id          *int         `form:"id,omitempty" json:"id,omitempty"`
	IdGt        *int         `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte       *int         `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn  *[]int `form:"id__in,omitempty" json:"id__in,omitempty"`
	IdLt  *int   `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte *int   `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering     *string `form:"ordering,omitempty" json:"ordering,omitempty"`
	Organization *int    `form:"organization,omitempty" json:"organization,omitempty"`

	// OrganizationIn Multiple values may be separated by commas.
	OrganizationIn *[]int `form:"organization__in,omitempty" json:"organization__in,omitempty"`
	ParentNode     *int   `form:"parent_node,omitempty" json:"parent_node,omitempty"`

	// ParentNodeIn Multiple values may be separated by commas.
	ParentNodeIn    *[]int     `form:"parent_node__in,omitempty" json:"parent_node__in,omitempty"`
	RegisteredAt    *time.Time `form:"registered_at,omitempty" json:"registered_at,omitempty"`
	RegisteredAtGt  *time.Time `form:"registered_at__gt,omitempty" json:"registered_at__gt,omitempty"`
	RegisteredAtGte *time.Time `form:"registered_at__gte,omitempty" json:"registered_at__gte,omitempty"`

	// RegisteredAtIn Multiple values may be separated by commas.
	RegisteredAtIn  *[]time.Time `form:"registered_at__in,omitempty" json:"registered_at__in,omitempty"`
	RegisteredAtLt  *time.Time   `form:"registered_at__lt,omitempty" json:"registered_at__lt,omitempty"`
	RegisteredAtLte *time.Time   `form:"registered_at__lte,omitempty" json:"registered_at__lte,omitempty"`
	ReplicatedAt    *time.Time   `form:"replicated_at,omitempty" json:"replicated_at,omitempty"`
	ReplicatedAtGt  *time.Time   `form:"replicated_at__gt,omitempty" json:"replicated_at__gt,omitempty"`
	ReplicatedAtGte *time.Time   `form:"replicated_at__gte,omitempty" json:"replicated_at__gte,omitempty"`

	// ReplicatedAtIn Multiple values may be separated by commas.
	ReplicatedAtIn  *[]time.Time `form:"replicated_at__in,omitempty" json:"replicated_at__in,omitempty"`
	ReplicatedAtLt  *time.Time   `form:"replicated_at__lt,omitempty" json:"replicated_at__lt,omitempty"`
	ReplicatedAtLte *time.Time   `form:"replicated_at__lte,omitempty" json:"replicated_at__lte,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// State * `REGISTERED` - Registered
	// * `UPLOADED` - Uploaded
	// * `HASHED` - Hashed
	// * `REPLICATED` - Replicated
	// * `COMPLETE_WITH_ERRORS` - Complete With Errors
	// * `TERMINATED_BY_USER` - Terminated by user action
	State          *DepositsListParamsState `form:"state,omitempty" json:"state,omitempty"`
	StateContains  *string                  `form:"state__contains,omitempty" json:"state__contains,omitempty"`
	StateEndswith  *string                  `form:"state__endswith,omitempty" json:"state__endswith,omitempty"`
	StateIcontains *string                  `form:"state__icontains,omitempty" json:"state__icontains,omitempty"`
	StateIexact    *string                  `form:"state__iexact,omitempty" json:"state__iexact,omitempty"`

	// StateIn Multiple values may be separated by commas.
	StateIn         *[]string  `form:"state__in,omitempty" json:"state__in,omitempty"`
	StateStartswith *string    `form:"state__startswith,omitempty" json:"state__startswith,omitempty"`
	UploadedAt      *time.Time `form:"uploaded_at,omitempty" json:"uploaded_at,omitempty"`
	UploadedAtGt    *time.Time `form:"uploaded_at__gt,omitempty" json:"uploaded_at__gt,omitempty"`
	UploadedAtGte   *time.Time `form:"uploaded_at__gte,omitempty" json:"uploaded_at__gte,omitempty"`

	// UploadedAtIn Multiple values may be separated by commas.
	UploadedAtIn  *[]time.Time `form:"uploaded_at__in,omitempty" json:"uploaded_at__in,omitempty"`
	UploadedAtLt  *time.Time   `form:"uploaded_at__lt,omitempty" json:"uploaded_at__lt,omitempty"`
	UploadedAtLte *time.Time   `form:"uploaded_at__lte,omitempty" json:"uploaded_at__lte,omitempty"`
	User          *int         `form:"user,omitempty" json:"user,omitempty"`

	// UserIn Multiple values may be separated by commas.
	UserIn *[]int `form:"user__in,omitempty" json:"user__in,omitempty"`
}

// DepositsListParamsState defines parameters for DepositsList.
type DepositsListParamsState string

// EventsListParams defines parameters for EventsList.
type EventsListParams struct {
	Collection *int `form:"collection,omitempty" json:"collection,omitempty"`

	// CollectionIn Multiple values may be separated by commas.
	CollectionIn *[]int `form:"collection__in,omitempty" json:"collection__in,omitempty"`

	// CollectionTreeNode Filter by collection-related tree_node
	CollectionTreeNode *int       `form:"collection_tree_node,omitempty" json:"collection_tree_node,omitempty"`
	EndedAt            *time.Time `form:"ended_at,omitempty" json:"ended_at,omitempty"`
	EndedAtGt          *time.Time `form:"ended_at__gt,omitempty" json:"ended_at__gt,omitempty"`
	EndedAtGte         *time.Time `form:"ended_at__gte,omitempty" json:"ended_at__gte,omitempty"`

	// EndedAtIn Multiple values may be separated by commas.
	EndedAtIn     *[]time.Time `form:"ended_at__in,omitempty" json:"ended_at__in,omitempty"`
	EndedAtLt     *time.Time   `form:"ended_at__lt,omitempty" json:"ended_at__lt,omitempty"`
	EndedAtLte    *time.Time   `form:"ended_at__lte,omitempty" json:"ended_at__lte,omitempty"`
	ErrorCount    *int         `form:"error_count,omitempty" json:"error_count,omitempty"`
	ErrorCountGt  *int         `form:"error_count__gt,omitempty" json:"error_count__gt,omitempty"`
	ErrorCountGte *int         `form:"error_count__gte,omitempty" json:"error_count__gte,omitempty"`

	// ErrorCountIn Multiple values may be separated by commas.
	ErrorCountIn  *[]int `form:"error_count__in,omitempty" json:"error_count__in,omitempty"`
	ErrorCountLt  *int   `form:"error_count__lt,omitempty" json:"error_count__lt,omitempty"`
	ErrorCountLte *int   `form:"error_count__lte,omitempty" json:"error_count__lte,omitempty"`
	FileCount     *int   `form:"file_count,omitempty" json:"file_count,omitempty"`
	FileCountGt   *int   `form:"file_count__gt,omitempty" json:"file_count__gt,omitempty"`
	FileCountGte  *int   `form:"file_count__gte,omitempty" json:"file_count__gte,omitempty"`

	// FileCountIn Multiple values may be separated by commas.
	FileCountIn  *[]int `form:"file_count__in,omitempty" json:"file_count__in,omitempty"`
	FileCountLt  *int   `form:"file_count__lt,omitempty" json:"file_count__lt,omitempty"`
	FileCountLte *int   `form:"file_count__lte,omitempty" json:"file_count__lte,omitempty"`
	Id           *int   `form:"id,omitempty" json:"id,omitempty"`
	IdGt         *int   `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte        *int   `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn  *[]int `form:"id__in,omitempty" json:"id__in,omitempty"`
	IdLt  *int   `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte *int   `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Search A search term.
	Search       *string    `form:"search,omitempty" json:"search,omitempty"`
	StartedAt    *time.Time `form:"started_at,omitempty" json:"started_at,omitempty"`
	StartedAtGt  *time.Time `form:"started_at__gt,omitempty" json:"started_at__gt,omitempty"`
	StartedAtGte *time.Time `form:"started_at__gte,omitempty" json:"started_at__gte,omitempty"`

	// StartedAtIn Multiple values may be separated by commas.
	StartedAtIn  *[]time.Time `form:"started_at__in,omitempty" json:"started_at__in,omitempty"`
	StartedAtLt  *time.Time   `form:"started_at__lt,omitempty" json:"started_at__lt,omitempty"`
	StartedAtLte *time.Time   `form:"started_at__lte,omitempty" json:"started_at__lte,omitempty"`

	// Type * `DEPOSIT` - Deposit
	// * `FIXITY` - Fixity
	Type          *EventsListParamsType `form:"type,omitempty" json:"type,omitempty"`
	TypeContains  *string               `form:"type__contains,omitempty" json:"type__contains,omitempty"`
	TypeEndswith  *string               `form:"type__endswith,omitempty" json:"type__endswith,omitempty"`
	TypeIcontains *string               `form:"type__icontains,omitempty" json:"type__icontains,omitempty"`
	TypeIexact    *string               `form:"type__iexact,omitempty" json:"type__iexact,omitempty"`

	// TypeIn Multiple values may be separated by commas.
	TypeIn         *[]string `form:"type__in,omitempty" json:"type__in,omitempty"`
	TypeStartswith *string   `form:"type__startswith,omitempty" json:"type__startswith,omitempty"`

	// UploadState * `REGISTERED` - Registered
	// * `UPLOADED` - Uploaded
	// * `HASHED` - Hashed
	// * `REPLICATED` - Replicated
	// * `COMPLETE_WITH_ERRORS` - Complete With Errors
	// * `TERMINATED_BY_USER` - Terminated by user action
	UploadState          *EventsListParamsUploadState `form:"upload_state,omitempty" json:"upload_state,omitempty"`
	UploadStateContains  *string                      `form:"upload_state__contains,omitempty" json:"upload_state__contains,omitempty"`
	UploadStateEndswith  *string                      `form:"upload_state__endswith,omitempty" json:"upload_state__endswith,omitempty"`
	UploadStateIcontains *string                      `form:"upload_state__icontains,omitempty" json:"upload_state__icontains,omitempty"`
	UploadStateIexact    *string                      `form:"upload_state__iexact,omitempty" json:"upload_state__iexact,omitempty"`

	// UploadStateIn Multiple values may be separated by commas.
	UploadStateIn         *[]string `form:"upload_state__in,omitempty" json:"upload_state__in,omitempty"`
	UploadStateStartswith *string   `form:"upload_state__startswith,omitempty" json:"upload_state__startswith,omitempty"`
}

// EventsListParamsType defines parameters for EventsList.
type EventsListParamsType string

// EventsListParamsUploadState defines parameters for EventsList.
type EventsListParamsUploadState string

// OrganizationsListParams defines parameters for OrganizationsList.
type OrganizationsListParams struct {
	// Flat Create a flat array from plucked field values
	Flat *string `form:"_flat,omitempty" json:"_flat,omitempty"`

	// Pluck A subset of response item fields to include
	Pluck *string `form:"_pluck,omitempty" json:"_pluck,omitempty"`

	// Limit Number of results to return per page.
	Limit         *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name          *string `form:"name,omitempty" json:"name,omitempty"`
	NameContains  *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`
	NameEndswith  *string `form:"name__endswith,omitempty" json:"name__endswith,omitempty"`
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIexact    *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Multiple values may be separated by commas.
	NameIn         *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`
	NameStartswith *string   `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`
	Plan     *int    `form:"plan,omitempty" json:"plan,omitempty"`

	// PlanIn Multiple values may be separated by commas.
	PlanIn        *[]int `form:"plan__in,omitempty" json:"plan__in,omitempty"`
	QuotaBytes    *int   `form:"quota_bytes,omitempty" json:"quota_bytes,omitempty"`
	QuotaBytesGt  *int   `form:"quota_bytes__gt,omitempty" json:"quota_bytes__gt,omitempty"`
	QuotaBytesGte *int   `form:"quota_bytes__gte,omitempty" json:"quota_bytes__gte,omitempty"`

	// QuotaBytesIn Multiple values may be separated by commas.
	QuotaBytesIn  *[]int `form:"quota_bytes__in,omitempty" json:"quota_bytes__in,omitempty"`
	QuotaBytesLt  *int   `form:"quota_bytes__lt,omitempty" json:"quota_bytes__lt,omitempty"`
	QuotaBytesLte *int   `form:"quota_bytes__lte,omitempty" json:"quota_bytes__lte,omitempty"`

	// Search A search term.
	Search   *string `form:"search,omitempty" json:"search,omitempty"`
	TreeNode *int    `form:"tree_node,omitempty" json:"tree_node,omitempty"`
}

// PlansListParams defines parameters for PlansList.
type PlansListParams struct {
	// Flat Create a flat array from plucked field values
	Flat *string `form:"_flat,omitempty" json:"_flat,omitempty"`

	// Pluck A subset of response item fields to include
	Pluck *string `form:"_pluck,omitempty" json:"_pluck,omitempty"`

	// DefaultFixityFrequency * `TWICE_YEARLY` - Twice Yearly
	// * `QUARTERLY` - Quarterly
	// * `MONTHLY` - Monthly
	DefaultFixityFrequency          *PlansListParamsDefaultFixityFrequency `form:"default_fixity_frequency,omitempty" json:"default_fixity_frequency,omitempty"`
	DefaultFixityFrequencyContains  *string                                `form:"default_fixity_frequency__contains,omitempty" json:"default_fixity_frequency__contains,omitempty"`
	DefaultFixityFrequencyEndswith  *string                                `form:"default_fixity_frequency__endswith,omitempty" json:"default_fixity_frequency__endswith,omitempty"`
	DefaultFixityFrequencyIcontains *string                                `form:"default_fixity_frequency__icontains,omitempty" json:"default_fixity_frequency__icontains,omitempty"`
	DefaultFixityFrequencyIexact    *string                                `form:"default_fixity_frequency__iexact,omitempty" json:"default_fixity_frequency__iexact,omitempty"`

	// DefaultFixityFrequencyIn Multiple values may be separated by commas.
	DefaultFixityFrequencyIn         *[]string `form:"default_fixity_frequency__in,omitempty" json:"default_fixity_frequency__in,omitempty"`
	DefaultFixityFrequencyStartswith *string   `form:"default_fixity_frequency__startswith,omitempty" json:"default_fixity_frequency__startswith,omitempty"`

	// DefaultReplication * `2` - 2x
	// * `3` - 3x
	// * `4` - 4x
	DefaultReplication    *PlansListParamsDefaultReplication `form:"default_replication,omitempty" json:"default_replication,omitempty"`
	DefaultReplicationGt  *int                               `form:"default_replication__gt,omitempty" json:"default_replication__gt,omitempty"`
	DefaultReplicationGte *int                               `form:"default_replication__gte,omitempty" json:"default_replication__gte,omitempty"`

	// DefaultReplicationIn Multiple values may be separated by commas.
	DefaultReplicationIn  *[]int `form:"default_replication__in,omitempty" json:"default_replication__in,omitempty"`
	DefaultReplicationLt  *int   `form:"default_replication__lt,omitempty" json:"default_replication__lt,omitempty"`
	DefaultReplicationLte *int   `form:"default_replication__lte,omitempty" json:"default_replication__lte,omitempty"`

	// Limit Number of results to return per page.
	Limit         *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name          *string `form:"name,omitempty" json:"name,omitempty"`
	NameContains  *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`
	NameEndswith  *string `form:"name__endswith,omitempty" json:"name__endswith,omitempty"`
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIexact    *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Multiple values may be separated by commas.
	NameIn         *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`
	NameStartswith *string   `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering            *string  `form:"ordering,omitempty" json:"ordering,omitempty"`
	PricePerTerabyte    *float32 `form:"price_per_terabyte,omitempty" json:"price_per_terabyte,omitempty"`
	PricePerTerabyteGt  *float32 `form:"price_per_terabyte__gt,omitempty" json:"price_per_terabyte__gt,omitempty"`
	PricePerTerabyteGte *float32 `form:"price_per_terabyte__gte,omitempty" json:"price_per_terabyte__gte,omitempty"`

	// PricePerTerabyteIn Multiple values may be separated by commas.
	PricePerTerabyteIn  *[]float32 `form:"price_per_terabyte__in,omitempty" json:"price_per_terabyte__in,omitempty"`
	PricePerTerabyteLt  *float32   `form:"price_per_terabyte__lt,omitempty" json:"price_per_terabyte__lt,omitempty"`
	PricePerTerabyteLte *float32   `form:"price_per_terabyte__lte,omitempty" json:"price_per_terabyte__lte,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PlansListParamsDefaultFixityFrequency defines parameters for PlansList.
type PlansListParamsDefaultFixityFrequency string

// PlansListParamsDefaultReplication defines parameters for PlansList.
type PlansListParamsDefaultReplication int

// ReportsListParams defines parameters for ReportsList.
type ReportsListParams struct {
	Collection *int `form:"collection,omitempty" json:"collection,omitempty"`

	// CollectionIn Multiple values may be separated by commas.
	CollectionIn           *[]int `form:"collection__in,omitempty" json:"collection__in,omitempty"`
	CollectionFileCount    *int   `form:"collection_file_count,omitempty" json:"collection_file_count,omitempty"`
	CollectionFileCountGt  *int   `form:"collection_file_count__gt,omitempty" json:"collection_file_count__gt,omitempty"`
	CollectionFileCountGte *int   `form:"collection_file_count__gte,omitempty" json:"collection_file_count__gte,omitempty"`

	// CollectionFileCountIn Multiple values may be separated by commas.
	CollectionFileCountIn  *[]int `form:"collection_file_count__in,omitempty" json:"collection_file_count__in,omitempty"`
	CollectionFileCountLt  *int   `form:"collection_file_count__lt,omitempty" json:"collection_file_count__lt,omitempty"`
	CollectionFileCountLte *int   `form:"collection_file_count__lte,omitempty" json:"collection_file_count__lte,omitempty"`
	CollectionTotalSize    *int   `form:"collection_total_size,omitempty" json:"collection_total_size,omitempty"`
	CollectionTotalSizeGt  *int   `form:"collection_total_size__gt,omitempty" json:"collection_total_size__gt,omitempty"`
	CollectionTotalSizeGte *int   `form:"collection_total_size__gte,omitempty" json:"collection_total_size__gte,omitempty"`

	// CollectionTotalSizeIn Multiple values may be separated by commas.
	CollectionTotalSizeIn  *[]int `form:"collection_total_size__in,omitempty" json:"collection_total_size__in,omitempty"`
	CollectionTotalSizeLt  *int   `form:"collection_total_size__lt,omitempty" json:"collection_total_size__lt,omitempty"`
	CollectionTotalSizeLte *int   `form:"collection_total_size__lte,omitempty" json:"collection_total_size__lte,omitempty"`

	// CollectionTreeNode Filter by collection-related tree_node
	CollectionTreeNode *int       `form:"collection_tree_node,omitempty" json:"collection_tree_node,omitempty"`
	EndedAt            *time.Time `form:"ended_at,omitempty" json:"ended_at,omitempty"`
	EndedAtGt          *time.Time `form:"ended_at__gt,omitempty" json:"ended_at__gt,omitempty"`
	EndedAtGte         *time.Time `form:"ended_at__gte,omitempty" json:"ended_at__gte,omitempty"`

	// EndedAtIn Multiple values may be separated by commas.
	EndedAtIn     *[]time.Time `form:"ended_at__in,omitempty" json:"ended_at__in,omitempty"`
	EndedAtLt     *time.Time   `form:"ended_at__lt,omitempty" json:"ended_at__lt,omitempty"`
	EndedAtLte    *time.Time   `form:"ended_at__lte,omitempty" json:"ended_at__lte,omitempty"`
	ErrorCount    *int         `form:"error_count,omitempty" json:"error_count,omitempty"`
	ErrorCountGt  *int         `form:"error_count__gt,omitempty" json:"error_count__gt,omitempty"`
	ErrorCountGte *int         `form:"error_count__gte,omitempty" json:"error_count__gte,omitempty"`

	// ErrorCountIn Multiple values may be separated by commas.
	ErrorCountIn  *[]int `form:"error_count__in,omitempty" json:"error_count__in,omitempty"`
	ErrorCountLt  *int   `form:"error_count__lt,omitempty" json:"error_count__lt,omitempty"`
	ErrorCountLte *int   `form:"error_count__lte,omitempty" json:"error_count__lte,omitempty"`
	FileCount     *int   `form:"file_count,omitempty" json:"file_count,omitempty"`
	FileCountGt   *int   `form:"file_count__gt,omitempty" json:"file_count__gt,omitempty"`
	FileCountGte  *int   `form:"file_count__gte,omitempty" json:"file_count__gte,omitempty"`

	// FileCountIn Multiple values may be separated by commas.
	FileCountIn  *[]int `form:"file_count__in,omitempty" json:"file_count__in,omitempty"`
	FileCountLt  *int   `form:"file_count__lt,omitempty" json:"file_count__lt,omitempty"`
	FileCountLte *int   `form:"file_count__lte,omitempty" json:"file_count__lte,omitempty"`
	Id           *int   `form:"id,omitempty" json:"id,omitempty"`
	IdGt         *int   `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte        *int   `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn  *[]int `form:"id__in,omitempty" json:"id__in,omitempty"`
	IdLt  *int   `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte *int   `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// ReportType * `FIXITY` - Fixity
	// * `DEPOSIT` - Deposit
	ReportType          *ReportsListParamsReportType `form:"report_type,omitempty" json:"report_type,omitempty"`
	ReportTypeContains  *string                      `form:"report_type__contains,omitempty" json:"report_type__contains,omitempty"`
	ReportTypeEndswith  *string                      `form:"report_type__endswith,omitempty" json:"report_type__endswith,omitempty"`
	ReportTypeIcontains *string                      `form:"report_type__icontains,omitempty" json:"report_type__icontains,omitempty"`
	ReportTypeIexact    *string                      `form:"report_type__iexact,omitempty" json:"report_type__iexact,omitempty"`

	// ReportTypeIn Multiple values may be separated by commas.
	ReportTypeIn         *[]string `form:"report_type__in,omitempty" json:"report_type__in,omitempty"`
	ReportTypeStartswith *string   `form:"report_type__startswith,omitempty" json:"report_type__startswith,omitempty"`

	// Search A search term.
	Search       *string    `form:"search,omitempty" json:"search,omitempty"`
	StartedAt    *time.Time `form:"started_at,omitempty" json:"started_at,omitempty"`
	StartedAtGt  *time.Time `form:"started_at__gt,omitempty" json:"started_at__gt,omitempty"`
	StartedAtGte *time.Time `form:"started_at__gte,omitempty" json:"started_at__gte,omitempty"`

	// StartedAtIn Multiple values may be separated by commas.
	StartedAtIn  *[]time.Time `form:"started_at__in,omitempty" json:"started_at__in,omitempty"`
	StartedAtLt  *time.Time   `form:"started_at__lt,omitempty" json:"started_at__lt,omitempty"`
	StartedAtLte *time.Time   `form:"started_at__lte,omitempty" json:"started_at__lte,omitempty"`
	TotalSize    *int         `form:"total_size,omitempty" json:"total_size,omitempty"`
	TotalSizeGt  *int         `form:"total_size__gt,omitempty" json:"total_size__gt,omitempty"`
	TotalSizeGte *int         `form:"total_size__gte,omitempty" json:"total_size__gte,omitempty"`

	// TotalSizeIn Multiple values may be separated by commas.
	TotalSizeIn  *[]int `form:"total_size__in,omitempty" json:"total_size__in,omitempty"`
	TotalSizeLt  *int   `form:"total_size__lt,omitempty" json:"total_size__lt,omitempty"`
	TotalSizeLte *int   `form:"total_size__lte,omitempty" json:"total_size__lte,omitempty"`
}

// ReportsListParamsReportType defines parameters for ReportsList.
type ReportsListParamsReportType string

// TreenodesListParams defines parameters for TreenodesList.
type TreenodesListParams struct {
	// Flat Create a flat array from plucked field values
	Flat *string `form:"_flat,omitempty" json:"_flat,omitempty"`

	// Pluck A subset of response item fields to include
	Pluck            *string `form:"_pluck,omitempty" json:"_pluck,omitempty"`
	Comment          *string `form:"comment,omitempty" json:"comment,omitempty"`
	CommentContains  *string `form:"comment__contains,omitempty" json:"comment__contains,omitempty"`
	CommentEndswith  *string `form:"comment__endswith,omitempty" json:"comment__endswith,omitempty"`
	CommentIcontains *string `form:"comment__icontains,omitempty" json:"comment__icontains,omitempty"`
	CommentIexact    *string `form:"comment__iexact,omitempty" json:"comment__iexact,omitempty"`

	// CommentIn Multiple values may be separated by commas.
	CommentIn         *[]string `form:"comment__in,omitempty" json:"comment__in,omitempty"`
	CommentStartswith *string   `form:"comment__startswith,omitempty" json:"comment__startswith,omitempty"`
	FileType          *string   `form:"file_type,omitempty" json:"file_type,omitempty"`
	FileTypeContains  *string   `form:"file_type__contains,omitempty" json:"file_type__contains,omitempty"`
	FileTypeEndswith  *string   `form:"file_type__endswith,omitempty" json:"file_type__endswith,omitempty"`
	FileTypeIcontains *string   `form:"file_type__icontains,omitempty" json:"file_type__icontains,omitempty"`
	FileTypeIexact    *string   `form:"file_type__iexact,omitempty" json:"file_type__iexact,omitempty"`

	// FileTypeIn Multiple values may be separated by commas.
	FileTypeIn         *[]string `form:"file_type__in,omitempty" json:"file_type__in,omitempty"`
	FileTypeStartswith *string   `form:"file_type__startswith,omitempty" json:"file_type__startswith,omitempty"`
	Id                 *int      `form:"id,omitempty" json:"id,omitempty"`
	IdGt               *int      `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte              *int      `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn  *[]int `form:"id__in,omitempty" json:"id__in,omitempty"`
	IdLt  *int   `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte *int   `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// Limit Number of results to return per page.
	Limit           *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Md5Sum          *string `form:"md5_sum,omitempty" json:"md5_sum,omitempty"`
	Md5SumContains  *string `form:"md5_sum__contains,omitempty" json:"md5_sum__contains,omitempty"`
	Md5SumEndswith  *string `form:"md5_sum__endswith,omitempty" json:"md5_sum__endswith,omitempty"`
	Md5SumIcontains *string `form:"md5_sum__icontains,omitempty" json:"md5_sum__icontains,omitempty"`
	Md5SumIexact    *string `form:"md5_sum__iexact,omitempty" json:"md5_sum__iexact,omitempty"`

	// Md5SumIn Multiple values may be separated by commas.
	Md5SumIn         *[]string  `form:"md5_sum__in,omitempty" json:"md5_sum__in,omitempty"`
	Md5SumStartswith *string    `form:"md5_sum__startswith,omitempty" json:"md5_sum__startswith,omitempty"`
	ModifiedAt       *time.Time `form:"modified_at,omitempty" json:"modified_at,omitempty"`
	ModifiedAtGt     *time.Time `form:"modified_at__gt,omitempty" json:"modified_at__gt,omitempty"`
	ModifiedAtGte    *time.Time `form:"modified_at__gte,omitempty" json:"modified_at__gte,omitempty"`

	// ModifiedAtIn Multiple values may be separated by commas.
	ModifiedAtIn  *[]time.Time `form:"modified_at__in,omitempty" json:"modified_at__in,omitempty"`
	ModifiedAtLt  *time.Time   `form:"modified_at__lt,omitempty" json:"modified_at__lt,omitempty"`
	ModifiedAtLte *time.Time   `form:"modified_at__lte,omitempty" json:"modified_at__lte,omitempty"`
	Name          *string      `form:"name,omitempty" json:"name,omitempty"`
	NameContains  *string      `form:"name__contains,omitempty" json:"name__contains,omitempty"`
	NameEndswith  *string      `form:"name__endswith,omitempty" json:"name__endswith,omitempty"`
	NameIcontains *string      `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIexact    *string      `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Multiple values may be separated by commas.
	NameIn         *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`
	NameStartswith *string   `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// NodeType * `FILE` - File
	// * `FOLDER` - Folder
	// * `COLLECTION` - Collection
	// * `ORGANIZATION` - Organization
	NodeType          *TreenodesListParamsNodeType `form:"node_type,omitempty" json:"node_type,omitempty"`
	NodeTypeContains  *string                      `form:"node_type__contains,omitempty" json:"node_type__contains,omitempty"`
	NodeTypeEndswith  *string                      `form:"node_type__endswith,omitempty" json:"node_type__endswith,omitempty"`
	NodeTypeIcontains *string                      `form:"node_type__icontains,omitempty" json:"node_type__icontains,omitempty"`
	NodeTypeIexact    *string                      `form:"node_type__iexact,omitempty" json:"node_type__iexact,omitempty"`

	// NodeTypeIn Multiple values may be separated by commas.
	NodeTypeIn         *[]string `form:"node_type__in,omitempty" json:"node_type__in,omitempty"`
	NodeTypeStartswith *string   `form:"node_type__startswith,omitempty" json:"node_type__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering      *string `form:"ordering,omitempty" json:"ordering,omitempty"`
	Parent        *int    `form:"parent,omitempty" json:"parent,omitempty"`
	Path          *string `form:"path,omitempty" json:"path,omitempty"`
	PathContains  *string `form:"path__contains,omitempty" json:"path__contains,omitempty"`
	PathEndswith  *string `form:"path__endswith,omitempty" json:"path__endswith,omitempty"`
	PathIcontains *string `form:"path__icontains,omitempty" json:"path__icontains,omitempty"`
	PathIexact    *string `form:"path__iexact,omitempty" json:"path__iexact,omitempty"`

	// PathIn Multiple values may be separated by commas.
	PathIn                  *[]string  `form:"path__in,omitempty" json:"path__in,omitempty"`
	PathStartswith          *string    `form:"path__startswith,omitempty" json:"path__startswith,omitempty"`
	PreDepositModifiedAt    *time.Time `form:"pre_deposit_modified_at,omitempty" json:"pre_deposit_modified_at,omitempty"`
	PreDepositModifiedAtGt  *time.Time `form:"pre_deposit_modified_at__gt,omitempty" json:"pre_deposit_modified_at__gt,omitempty"`
	PreDepositModifiedAtGte *time.Time `form:"pre_deposit_modified_at__gte,omitempty" json:"pre_deposit_modified_at__gte,omitempty"`

	// PreDepositModifiedAtIn Multiple values may be separated by commas.
	PreDepositModifiedAtIn  *[]time.Time `form:"pre_deposit_modified_at__in,omitempty" json:"pre_deposit_modified_at__in,omitempty"`
	PreDepositModifiedAtLt  *time.Time   `form:"pre_deposit_modified_at__lt,omitempty" json:"pre_deposit_modified_at__lt,omitempty"`
	PreDepositModifiedAtLte *time.Time   `form:"pre_deposit_modified_at__lte,omitempty" json:"pre_deposit_modified_at__lte,omitempty"`

	// Search A search term.
	Search           *string `form:"search,omitempty" json:"search,omitempty"`
	Sha1Sum          *string `form:"sha1_sum,omitempty" json:"sha1_sum,omitempty"`
	Sha1SumContains  *string `form:"sha1_sum__contains,omitempty" json:"sha1_sum__contains,omitempty"`
	Sha1SumEndswith  *string `form:"sha1_sum__endswith,omitempty" json:"sha1_sum__endswith,omitempty"`
	Sha1SumIcontains *string `form:"sha1_sum__icontains,omitempty" json:"sha1_sum__icontains,omitempty"`
	Sha1SumIexact    *string `form:"sha1_sum__iexact,omitempty" json:"sha1_sum__iexact,omitempty"`

	// Sha1SumIn Multiple values may be separated by commas.
	Sha1SumIn          *[]string `form:"sha1_sum__in,omitempty" json:"sha1_sum__in,omitempty"`
	Sha1SumStartswith  *string   `form:"sha1_sum__startswith,omitempty" json:"sha1_sum__startswith,omitempty"`
	Sha256Sum          *string   `form:"sha256_sum,omitempty" json:"sha256_sum,omitempty"`
	Sha256SumContains  *string   `form:"sha256_sum__contains,omitempty" json:"sha256_sum__contains,omitempty"`
	Sha256SumEndswith  *string   `form:"sha256_sum__endswith,omitempty" json:"sha256_sum__endswith,omitempty"`
	Sha256SumIcontains *string   `form:"sha256_sum__icontains,omitempty" json:"sha256_sum__icontains,omitempty"`
	Sha256SumIexact    *string   `form:"sha256_sum__iexact,omitempty" json:"sha256_sum__iexact,omitempty"`

	// Sha256SumIn Multiple values may be separated by commas.
	Sha256SumIn         *[]string `form:"sha256_sum__in,omitempty" json:"sha256_sum__in,omitempty"`
	Sha256SumStartswith *string   `form:"sha256_sum__startswith,omitempty" json:"sha256_sum__startswith,omitempty"`
	Size                *int      `form:"size,omitempty" json:"size,omitempty"`
	SizeGt              *int      `form:"size__gt,omitempty" json:"size__gt,omitempty"`
	SizeGte             *int      `form:"size__gte,omitempty" json:"size__gte,omitempty"`

	// SizeIn Multiple values may be separated by commas.
	SizeIn        *[]int     `form:"size__in,omitempty" json:"size__in,omitempty"`
	SizeLt        *int       `form:"size__lt,omitempty" json:"size__lt,omitempty"`
	SizeLte       *int       `form:"size__lte,omitempty" json:"size__lte,omitempty"`
	UploadedAt    *time.Time `form:"uploaded_at,omitempty" json:"uploaded_at,omitempty"`
	UploadedAtGt  *time.Time `form:"uploaded_at__gt,omitempty" json:"uploaded_at__gt,omitempty"`
	UploadedAtGte *time.Time `form:"uploaded_at__gte,omitempty" json:"uploaded_at__gte,omitempty"`

	// UploadedAtIn Multiple values may be separated by commas.
	UploadedAtIn  *[]time.Time `form:"uploaded_at__in,omitempty" json:"uploaded_at__in,omitempty"`
	UploadedAtLt  *time.Time   `form:"uploaded_at__lt,omitempty" json:"uploaded_at__lt,omitempty"`
	UploadedAtLte *time.Time   `form:"uploaded_at__lte,omitempty" json:"uploaded_at__lte,omitempty"`
	UploadedBy    *int         `form:"uploaded_by,omitempty" json:"uploaded_by,omitempty"`

	// UploadedByIn Multiple values may be separated by commas.
	UploadedByIn *[]int `form:"uploaded_by__in,omitempty" json:"uploaded_by__in,omitempty"`
}

// TreenodesListParamsNodeType defines parameters for TreenodesList.
type TreenodesListParamsNodeType string

// UsersListParams defines parameters for UsersList.
type UsersListParams struct {
	// Flat Create a flat array from plucked field values
	Flat *string `form:"_flat,omitempty" json:"_flat,omitempty"`

	// Pluck A subset of response item fields to include
	Pluck         *string    `form:"_pluck,omitempty" json:"_pluck,omitempty"`
	DateJoined    *time.Time `form:"date_joined,omitempty" json:"date_joined,omitempty"`
	DateJoinedGt  *time.Time `form:"date_joined__gt,omitempty" json:"date_joined__gt,omitempty"`
	DateJoinedGte *time.Time `form:"date_joined__gte,omitempty" json:"date_joined__gte,omitempty"`

	// DateJoinedIn Multiple values may be separated by commas.
	DateJoinedIn   *[]time.Time `form:"date_joined__in,omitempty" json:"date_joined__in,omitempty"`
	DateJoinedLt   *time.Time   `form:"date_joined__lt,omitempty" json:"date_joined__lt,omitempty"`
	DateJoinedLte  *time.Time   `form:"date_joined__lte,omitempty" json:"date_joined__lte,omitempty"`
	Email          *string      `form:"email,omitempty" json:"email,omitempty"`
	EmailContains  *string      `form:"email__contains,omitempty" json:"email__contains,omitempty"`
	EmailEndswith  *string      `form:"email__endswith,omitempty" json:"email__endswith,omitempty"`
	EmailIcontains *string      `form:"email__icontains,omitempty" json:"email__icontains,omitempty"`
	EmailIexact    *string      `form:"email__iexact,omitempty" json:"email__iexact,omitempty"`

	// EmailIn Multiple values may be separated by commas.
	EmailIn            *[]string `form:"email__in,omitempty" json:"email__in,omitempty"`
	EmailStartswith    *string   `form:"email__startswith,omitempty" json:"email__startswith,omitempty"`
	FirstName          *string   `form:"first_name,omitempty" json:"first_name,omitempty"`
	FirstNameContains  *string   `form:"first_name__contains,omitempty" json:"first_name__contains,omitempty"`
	FirstNameEndswith  *string   `form:"first_name__endswith,omitempty" json:"first_name__endswith,omitempty"`
	FirstNameIcontains *string   `form:"first_name__icontains,omitempty" json:"first_name__icontains,omitempty"`
	FirstNameIexact    *string   `form:"first_name__iexact,omitempty" json:"first_name__iexact,omitempty"`

	// FirstNameIn Multiple values may be separated by commas.
	FirstNameIn         *[]string `form:"first_name__in,omitempty" json:"first_name__in,omitempty"`
	FirstNameStartswith *string   `form:"first_name__startswith,omitempty" json:"first_name__startswith,omitempty"`
	Id                  *int      `form:"id,omitempty" json:"id,omitempty"`
	IdGt                *int      `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte               *int      `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn         *[]int     `form:"id__in,omitempty" json:"id__in,omitempty"`
	IdLt         *int       `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte        *int       `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	LastLogin    *time.Time `form:"last_login,omitempty" json:"last_login,omitempty"`
	LastLoginGt  *time.Time `form:"last_login__gt,omitempty" json:"last_login__gt,omitempty"`
	LastLoginGte *time.Time `form:"last_login__gte,omitempty" json:"last_login__gte,omitempty"`

	// LastLoginIn Multiple values may be separated by commas.
	LastLoginIn       *[]time.Time `form:"last_login__in,omitempty" json:"last_login__in,omitempty"`
	LastLoginLt       *time.Time   `form:"last_login__lt,omitempty" json:"last_login__lt,omitempty"`
	LastLoginLte      *time.Time   `form:"last_login__lte,omitempty" json:"last_login__lte,omitempty"`
	LastName          *string      `form:"last_name,omitempty" json:"last_name,omitempty"`
	LastNameContains  *string      `form:"last_name__contains,omitempty" json:"last_name__contains,omitempty"`
	LastNameEndswith  *string      `form:"last_name__endswith,omitempty" json:"last_name__endswith,omitempty"`
	LastNameIcontains *string      `form:"last_name__icontains,omitempty" json:"last_name__icontains,omitempty"`
	LastNameIexact    *string      `form:"last_name__iexact,omitempty" json:"last_name__iexact,omitempty"`

	// LastNameIn Multiple values may be separated by commas.
	LastNameIn         *[]string `form:"last_name__in,omitempty" json:"last_name__in,omitempty"`
	LastNameStartswith *string   `form:"last_name__startswith,omitempty" json:"last_name__startswith,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering     *string `form:"ordering,omitempty" json:"ordering,omitempty"`
	Organization *int    `form:"organization,omitempty" json:"organization,omitempty"`

	// OrganizationIn Multiple values may be separated by commas.
	OrganizationIn *[]int `form:"organization__in,omitempty" json:"organization__in,omitempty"`

	// Role * `ADMIN` - Admin
	// * `USER` - User
	// * `VIEWER` - Viewer
	Role          *UsersListParamsRole `form:"role,omitempty" json:"role,omitempty"`
	RoleContains  *string              `form:"role__contains,omitempty" json:"role__contains,omitempty"`
	RoleEndswith  *string              `form:"role__endswith,omitempty" json:"role__endswith,omitempty"`
	RoleIcontains *string              `form:"role__icontains,omitempty" json:"role__icontains,omitempty"`
	RoleIexact    *string              `form:"role__iexact,omitempty" json:"role__iexact,omitempty"`

	// RoleIn Multiple values may be separated by commas.
	RoleIn         *[]string `form:"role__in,omitempty" json:"role__in,omitempty"`
	RoleStartswith *string   `form:"role__startswith,omitempty" json:"role__startswith,omitempty"`

	// Search A search term.
	Search            *string `form:"search,omitempty" json:"search,omitempty"`
	Username          *string `form:"username,omitempty" json:"username,omitempty"`
	UsernameContains  *string `form:"username__contains,omitempty" json:"username__contains,omitempty"`
	UsernameEndswith  *string `form:"username__endswith,omitempty" json:"username__endswith,omitempty"`
	UsernameIcontains *string `form:"username__icontains,omitempty" json:"username__icontains,omitempty"`
	UsernameIexact    *string `form:"username__iexact,omitempty" json:"username__iexact,omitempty"`

	// UsernameIn Multiple values may be separated by commas.
	UsernameIn         *[]string `form:"username__in,omitempty" json:"username__in,omitempty"`
	UsernameStartswith *string   `form:"username__startswith,omitempty" json:"username__startswith,omitempty"`
}

// UsersListParamsRole defines parameters for UsersList.
type UsersListParamsRole string

// CollectionsCreateJSONRequestBody defines body for CollectionsCreate for application/json ContentType.
type CollectionsCreateJSONRequestBody = CollectionRequest

// CollectionsCreateFormdataRequestBody defines body for CollectionsCreate for application/x-www-form-urlencoded ContentType.
type CollectionsCreateFormdataRequestBody = CollectionRequest

// CollectionsCreateMultipartRequestBody defines body for CollectionsCreate for multipart/form-data ContentType.
type CollectionsCreateMultipartRequestBody = CollectionRequest

// CollectionsPartialUpdateJSONRequestBody defines body for CollectionsPartialUpdate for application/json ContentType.
type CollectionsPartialUpdateJSONRequestBody = PatchedCollectionRequest

// CollectionsPartialUpdateFormdataRequestBody defines body for CollectionsPartialUpdate for application/x-www-form-urlencoded ContentType.
type CollectionsPartialUpdateFormdataRequestBody = PatchedCollectionRequest

// CollectionsPartialUpdateMultipartRequestBody defines body for CollectionsPartialUpdate for multipart/form-data ContentType.
type CollectionsPartialUpdateMultipartRequestBody = PatchedCollectionRequest

// CollectionsUpdateJSONRequestBody defines body for CollectionsUpdate for application/json ContentType.
type CollectionsUpdateJSONRequestBody = CollectionRequest

// CollectionsUpdateFormdataRequestBody defines body for CollectionsUpdate for application/x-www-form-urlencoded ContentType.
type CollectionsUpdateFormdataRequestBody = CollectionRequest

// CollectionsUpdateMultipartRequestBody defines body for CollectionsUpdate for multipart/form-data ContentType.
type CollectionsUpdateMultipartRequestBody = CollectionRequest

// TreenodesCreateJSONRequestBody defines body for TreenodesCreate for application/json ContentType.
type TreenodesCreateJSONRequestBody = TreeNodeRequest

// TreenodesCreateFormdataRequestBody defines body for TreenodesCreate for application/x-www-form-urlencoded ContentType.
type TreenodesCreateFormdataRequestBody = TreeNodeRequest

// TreenodesCreateMultipartRequestBody defines body for TreenodesCreate for multipart/form-data ContentType.
type TreenodesCreateMultipartRequestBody = TreeNodeRequest

// TreenodesPartialUpdateJSONRequestBody defines body for TreenodesPartialUpdate for application/json ContentType.
type TreenodesPartialUpdateJSONRequestBody = PatchedTreeNodeRequest

// TreenodesPartialUpdateFormdataRequestBody defines body for TreenodesPartialUpdate for application/x-www-form-urlencoded ContentType.
type TreenodesPartialUpdateFormdataRequestBody = PatchedTreeNodeRequest

// TreenodesPartialUpdateMultipartRequestBody defines body for TreenodesPartialUpdate for multipart/form-data ContentType.
type TreenodesPartialUpdateMultipartRequestBody = PatchedTreeNodeRequest

// TreenodesUpdateJSONRequestBody defines body for TreenodesUpdate for application/json ContentType.
type TreenodesUpdateJSONRequestBody = TreeNodeRequest

// TreenodesUpdateFormdataRequestBody defines body for TreenodesUpdate for application/x-www-form-urlencoded ContentType.
type TreenodesUpdateFormdataRequestBody = TreeNodeRequest

// TreenodesUpdateMultipartRequestBody defines body for TreenodesUpdate for multipart/form-data ContentType.
type TreenodesUpdateMultipartRequestBody = TreeNodeRequest

// UsersCreateJSONRequestBody defines body for UsersCreate for application/json ContentType.
type UsersCreateJSONRequestBody = UserRequest

// UsersCreateFormdataRequestBody defines body for UsersCreate for application/x-www-form-urlencoded ContentType.
type UsersCreateFormdataRequestBody = UserRequest

// UsersCreateMultipartRequestBody defines body for UsersCreate for multipart/form-data ContentType.
type UsersCreateMultipartRequestBody = UserRequest

// UsersPartialUpdateJSONRequestBody defines body for UsersPartialUpdate for application/json ContentType.
type UsersPartialUpdateJSONRequestBody = PatchedUserRequest

// UsersPartialUpdateFormdataRequestBody defines body for UsersPartialUpdate for application/x-www-form-urlencoded ContentType.
type UsersPartialUpdateFormdataRequestBody = PatchedUserRequest

// UsersPartialUpdateMultipartRequestBody defines body for UsersPartialUpdate for multipart/form-data ContentType.
type UsersPartialUpdateMultipartRequestBody = PatchedUserRequest

// UsersUpdateJSONRequestBody defines body for UsersUpdate for application/json ContentType.
type UsersUpdateJSONRequestBody = UserRequest

// UsersUpdateFormdataRequestBody defines body for UsersUpdate for application/x-www-form-urlencoded ContentType.
type UsersUpdateFormdataRequestBody = UserRequest

// UsersUpdateMultipartRequestBody defines body for UsersUpdate for multipart/form-data ContentType.
type UsersUpdateMultipartRequestBody = UserRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CollectionSummariesList request
	CollectionSummariesList(ctx context.Context, params *CollectionSummariesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsList request
	CollectionsList(ctx context.Context, params *CollectionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsCreate request with any body
	CollectionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsCreate(ctx context.Context, body CollectionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsCreateWithFormdataBody(ctx context.Context, body CollectionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsRetrieve request
	CollectionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsPartialUpdate request with any body
	CollectionsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsPartialUpdate(ctx context.Context, id int, body CollectionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CollectionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsUpdate request with any body
	CollectionsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsUpdate(ctx context.Context, id int, body CollectionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsUpdateWithFormdataBody(ctx context.Context, id int, body CollectionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DepositsList request
	DepositsList(ctx context.Context, params *DepositsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DepositsRetrieve request
	DepositsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsList request
	EventsList(ctx context.Context, params *EventsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsRetrieve request
	EventsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationsList request
	OrganizationsList(ctx context.Context, params *OrganizationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationsRetrieve request
	OrganizationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlansList request
	PlansList(ctx context.Context, params *PlansListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlansRetrieve request
	PlansRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportsList request
	ReportsList(ctx context.Context, params *ReportsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportsRetrieve request
	ReportsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreenodesList request
	TreenodesList(ctx context.Context, params *TreenodesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreenodesCreate request with any body
	TreenodesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TreenodesCreate(ctx context.Context, body TreenodesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TreenodesCreateWithFormdataBody(ctx context.Context, body TreenodesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreenodesDestroy request
	TreenodesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreenodesRetrieve request
	TreenodesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreenodesPartialUpdate request with any body
	TreenodesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TreenodesPartialUpdate(ctx context.Context, id int, body TreenodesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TreenodesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TreenodesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreenodesUpdate request with any body
	TreenodesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TreenodesUpdate(ctx context.Context, id int, body TreenodesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TreenodesUpdateWithFormdataBody(ctx context.Context, id int, body TreenodesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersList request
	UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersCreate request with any body
	UsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreate(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreateWithFormdataBody(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersRetrieve request
	UsersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersPartialUpdate request with any body
	UsersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPartialUpdate(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPartialUpdateWithFormdataBody(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUpdate request with any body
	UsersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdate(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdateWithFormdataBody(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CollectionSummariesList(ctx context.Context, params *CollectionSummariesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionSummariesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsList(ctx context.Context, params *CollectionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsCreate(ctx context.Context, body CollectionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsCreateWithFormdataBody(ctx context.Context, body CollectionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsPartialUpdate(ctx context.Context, id int, body CollectionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CollectionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsUpdate(ctx context.Context, id int, body CollectionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsUpdateWithFormdataBody(ctx context.Context, id int, body CollectionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DepositsList(ctx context.Context, params *DepositsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepositsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DepositsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepositsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsList(ctx context.Context, params *EventsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsList(ctx context.Context, params *OrganizationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlansList(ctx context.Context, params *PlansListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlansListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlansRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlansRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportsList(ctx context.Context, params *ReportsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesList(ctx context.Context, params *TreenodesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesCreate(ctx context.Context, body TreenodesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesCreateWithFormdataBody(ctx context.Context, body TreenodesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesPartialUpdate(ctx context.Context, id int, body TreenodesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TreenodesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesUpdate(ctx context.Context, id int, body TreenodesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreenodesUpdateWithFormdataBody(ctx context.Context, id int, body TreenodesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreenodesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreate(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateWithFormdataBody(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdate(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdateWithFormdataBody(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdate(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateWithFormdataBody(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCollectionSummariesListRequest generates requests for CollectionSummariesList
func NewCollectionSummariesListRequest(server string, params *CollectionSummariesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collection-summaries/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionsListRequest generates requests for CollectionsList
func NewCollectionsListRequest(server string, params *CollectionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Flat != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_flat", runtime.ParamLocationQuery, *params.Flat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pluck != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_pluck", runtime.ParamLocationQuery, *params.Pluck); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FixityFrequency != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fixity_frequency", runtime.ParamLocationQuery, *params.FixityFrequency); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FixityFrequencyContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fixity_frequency__contains", runtime.ParamLocationQuery, *params.FixityFrequencyContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FixityFrequencyEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fixity_frequency__endswith", runtime.ParamLocationQuery, *params.FixityFrequencyEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FixityFrequencyIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fixity_frequency__icontains", runtime.ParamLocationQuery, *params.FixityFrequencyIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FixityFrequencyIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fixity_frequency__iexact", runtime.ParamLocationQuery, *params.FixityFrequencyIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FixityFrequencyIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fixity_frequency__in", runtime.ParamLocationQuery, *params.FixityFrequencyIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FixityFrequencyStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fixity_frequency__startswith", runtime.ParamLocationQuery, *params.FixityFrequencyStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__endswith", runtime.ParamLocationQuery, *params.NameEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Organization != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization", runtime.ParamLocationQuery, *params.Organization); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "organization__in", runtime.ParamLocationQuery, *params.OrganizationIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetReplication != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_replication", runtime.ParamLocationQuery, *params.TargetReplication); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetReplicationGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_replication__gt", runtime.ParamLocationQuery, *params.TargetReplicationGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetReplicationGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_replication__gte", runtime.ParamLocationQuery, *params.TargetReplicationGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetReplicationIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "target_replication__in", runtime.ParamLocationQuery, *params.TargetReplicationIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetReplicationLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_replication__lt", runtime.ParamLocationQuery, *params.TargetReplicationLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetReplicationLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_replication__lte", runtime.ParamLocationQuery, *params.TargetReplicationLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TreeNode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tree_node", runtime.ParamLocationQuery, *params.TreeNode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionsCreateRequest calls the generic CollectionsCreate builder with application/json body
func NewCollectionsCreateRequest(server string, body CollectionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCollectionsCreateRequestWithFormdataBody calls the generic CollectionsCreate builder with application/x-www-form-urlencoded body
func NewCollectionsCreateRequestWithFormdataBody(server string, body CollectionsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCollectionsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCollectionsCreateRequestWithBody generates requests for CollectionsCreate with any type of body
func NewCollectionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionsRetrieveRequest generates requests for CollectionsRetrieve
func NewCollectionsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionsPartialUpdateRequest calls the generic CollectionsPartialUpdate builder with application/json body
func NewCollectionsPartialUpdateRequest(server string, id int, body CollectionsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCollectionsPartialUpdateRequestWithFormdataBody calls the generic CollectionsPartialUpdate builder with application/x-www-form-urlencoded body
func NewCollectionsPartialUpdateRequestWithFormdataBody(server string, id int, body CollectionsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCollectionsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCollectionsPartialUpdateRequestWithBody generates requests for CollectionsPartialUpdate with any type of body
func NewCollectionsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionsUpdateRequest calls the generic CollectionsUpdate builder with application/json body
func NewCollectionsUpdateRequest(server string, id int, body CollectionsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCollectionsUpdateRequestWithFormdataBody calls the generic CollectionsUpdate builder with application/x-www-form-urlencoded body
func NewCollectionsUpdateRequestWithFormdataBody(server string, id int, body CollectionsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCollectionsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCollectionsUpdateRequestWithBody generates requests for CollectionsUpdate with any type of body
func NewCollectionsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDepositsListRequest generates requests for DepositsList
func NewDepositsListRequest(server string, params *DepositsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/deposits/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Flat != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_flat", runtime.ParamLocationQuery, *params.Flat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pluck != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_pluck", runtime.ParamLocationQuery, *params.Pluck); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Collection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection", runtime.ParamLocationQuery, *params.Collection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "collection__in", runtime.ParamLocationQuery, *params.CollectionIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HashedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hashed_at", runtime.ParamLocationQuery, *params.HashedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HashedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hashed_at__gt", runtime.ParamLocationQuery, *params.HashedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HashedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hashed_at__gte", runtime.ParamLocationQuery, *params.HashedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HashedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hashed_at__in", runtime.ParamLocationQuery, *params.HashedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HashedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hashed_at__lt", runtime.ParamLocationQuery, *params.HashedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HashedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hashed_at__lte", runtime.ParamLocationQuery, *params.HashedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Organization != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization", runtime.ParamLocationQuery, *params.Organization); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "organization__in", runtime.ParamLocationQuery, *params.OrganizationIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ParentNode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_node", runtime.ParamLocationQuery, *params.ParentNode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ParentNodeIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_node__in", runtime.ParamLocationQuery, *params.ParentNodeIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registered_at", runtime.ParamLocationQuery, *params.RegisteredAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registered_at__gt", runtime.ParamLocationQuery, *params.RegisteredAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registered_at__gte", runtime.ParamLocationQuery, *params.RegisteredAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "registered_at__in", runtime.ParamLocationQuery, *params.RegisteredAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registered_at__lt", runtime.ParamLocationQuery, *params.RegisteredAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registered_at__lte", runtime.ParamLocationQuery, *params.RegisteredAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReplicatedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replicated_at", runtime.ParamLocationQuery, *params.ReplicatedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReplicatedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replicated_at__gt", runtime.ParamLocationQuery, *params.ReplicatedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReplicatedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replicated_at__gte", runtime.ParamLocationQuery, *params.ReplicatedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReplicatedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "replicated_at__in", runtime.ParamLocationQuery, *params.ReplicatedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReplicatedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replicated_at__lt", runtime.ParamLocationQuery, *params.ReplicatedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReplicatedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replicated_at__lte", runtime.ParamLocationQuery, *params.ReplicatedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state__contains", runtime.ParamLocationQuery, *params.StateContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state__endswith", runtime.ParamLocationQuery, *params.StateEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state__icontains", runtime.ParamLocationQuery, *params.StateIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state__iexact", runtime.ParamLocationQuery, *params.StateIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "state__in", runtime.ParamLocationQuery, *params.StateIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state__startswith", runtime.ParamLocationQuery, *params.StateStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at", runtime.ParamLocationQuery, *params.UploadedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at__gt", runtime.ParamLocationQuery, *params.UploadedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at__gte", runtime.ParamLocationQuery, *params.UploadedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "uploaded_at__in", runtime.ParamLocationQuery, *params.UploadedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at__lt", runtime.ParamLocationQuery, *params.UploadedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at__lte", runtime.ParamLocationQuery, *params.UploadedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UserIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user__in", runtime.ParamLocationQuery, *params.UserIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDepositsRetrieveRequest generates requests for DepositsRetrieve
func NewDepositsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/deposits/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsListRequest generates requests for EventsList
func NewEventsListRequest(server string, params *EventsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Collection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection", runtime.ParamLocationQuery, *params.Collection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "collection__in", runtime.ParamLocationQuery, *params.CollectionIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionTreeNode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_tree_node", runtime.ParamLocationQuery, *params.CollectionTreeNode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at", runtime.ParamLocationQuery, *params.EndedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__gt", runtime.ParamLocationQuery, *params.EndedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__gte", runtime.ParamLocationQuery, *params.EndedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ended_at__in", runtime.ParamLocationQuery, *params.EndedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__lt", runtime.ParamLocationQuery, *params.EndedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__lte", runtime.ParamLocationQuery, *params.EndedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count", runtime.ParamLocationQuery, *params.ErrorCount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count__gt", runtime.ParamLocationQuery, *params.ErrorCountGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count__gte", runtime.ParamLocationQuery, *params.ErrorCountGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "error_count__in", runtime.ParamLocationQuery, *params.ErrorCountIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count__lt", runtime.ParamLocationQuery, *params.ErrorCountLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count__lte", runtime.ParamLocationQuery, *params.ErrorCountLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count", runtime.ParamLocationQuery, *params.FileCount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count__gt", runtime.ParamLocationQuery, *params.FileCountGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count__gte", runtime.ParamLocationQuery, *params.FileCountGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "file_count__in", runtime.ParamLocationQuery, *params.FileCountIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count__lt", runtime.ParamLocationQuery, *params.FileCountLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count__lte", runtime.ParamLocationQuery, *params.FileCountLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at", runtime.ParamLocationQuery, *params.StartedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__gt", runtime.ParamLocationQuery, *params.StartedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__gte", runtime.ParamLocationQuery, *params.StartedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "started_at__in", runtime.ParamLocationQuery, *params.StartedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__lt", runtime.ParamLocationQuery, *params.StartedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__lte", runtime.ParamLocationQuery, *params.StartedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__contains", runtime.ParamLocationQuery, *params.TypeContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__endswith", runtime.ParamLocationQuery, *params.TypeEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__icontains", runtime.ParamLocationQuery, *params.TypeIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__iexact", runtime.ParamLocationQuery, *params.TypeIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "type__in", runtime.ParamLocationQuery, *params.TypeIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__startswith", runtime.ParamLocationQuery, *params.TypeStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upload_state", runtime.ParamLocationQuery, *params.UploadState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadStateContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upload_state__contains", runtime.ParamLocationQuery, *params.UploadStateContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadStateEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upload_state__endswith", runtime.ParamLocationQuery, *params.UploadStateEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadStateIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upload_state__icontains", runtime.ParamLocationQuery, *params.UploadStateIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadStateIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upload_state__iexact", runtime.ParamLocationQuery, *params.UploadStateIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadStateIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "upload_state__in", runtime.ParamLocationQuery, *params.UploadStateIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadStateStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upload_state__startswith", runtime.ParamLocationQuery, *params.UploadStateStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsRetrieveRequest generates requests for EventsRetrieve
func NewEventsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationsListRequest generates requests for OrganizationsList
func NewOrganizationsListRequest(server string, params *OrganizationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Flat != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_flat", runtime.ParamLocationQuery, *params.Flat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pluck != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_pluck", runtime.ParamLocationQuery, *params.Pluck); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__endswith", runtime.ParamLocationQuery, *params.NameEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Plan != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan", runtime.ParamLocationQuery, *params.Plan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PlanIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "plan__in", runtime.ParamLocationQuery, *params.PlanIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QuotaBytes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quota_bytes", runtime.ParamLocationQuery, *params.QuotaBytes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QuotaBytesGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quota_bytes__gt", runtime.ParamLocationQuery, *params.QuotaBytesGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QuotaBytesGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quota_bytes__gte", runtime.ParamLocationQuery, *params.QuotaBytesGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QuotaBytesIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quota_bytes__in", runtime.ParamLocationQuery, *params.QuotaBytesIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QuotaBytesLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quota_bytes__lt", runtime.ParamLocationQuery, *params.QuotaBytesLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QuotaBytesLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quota_bytes__lte", runtime.ParamLocationQuery, *params.QuotaBytesLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TreeNode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tree_node", runtime.ParamLocationQuery, *params.TreeNode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationsRetrieveRequest generates requests for OrganizationsRetrieve
func NewOrganizationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlansListRequest generates requests for PlansList
func NewPlansListRequest(server string, params *PlansListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Flat != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_flat", runtime.ParamLocationQuery, *params.Flat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pluck != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_pluck", runtime.ParamLocationQuery, *params.Pluck); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultFixityFrequency != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_fixity_frequency", runtime.ParamLocationQuery, *params.DefaultFixityFrequency); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultFixityFrequencyContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_fixity_frequency__contains", runtime.ParamLocationQuery, *params.DefaultFixityFrequencyContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultFixityFrequencyEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_fixity_frequency__endswith", runtime.ParamLocationQuery, *params.DefaultFixityFrequencyEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultFixityFrequencyIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_fixity_frequency__icontains", runtime.ParamLocationQuery, *params.DefaultFixityFrequencyIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultFixityFrequencyIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_fixity_frequency__iexact", runtime.ParamLocationQuery, *params.DefaultFixityFrequencyIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultFixityFrequencyIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_fixity_frequency__in", runtime.ParamLocationQuery, *params.DefaultFixityFrequencyIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultFixityFrequencyStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_fixity_frequency__startswith", runtime.ParamLocationQuery, *params.DefaultFixityFrequencyStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultReplication != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_replication", runtime.ParamLocationQuery, *params.DefaultReplication); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultReplicationGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_replication__gt", runtime.ParamLocationQuery, *params.DefaultReplicationGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultReplicationGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_replication__gte", runtime.ParamLocationQuery, *params.DefaultReplicationGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultReplicationIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_replication__in", runtime.ParamLocationQuery, *params.DefaultReplicationIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultReplicationLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_replication__lt", runtime.ParamLocationQuery, *params.DefaultReplicationLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DefaultReplicationLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_replication__lte", runtime.ParamLocationQuery, *params.DefaultReplicationLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__endswith", runtime.ParamLocationQuery, *params.NameEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PricePerTerabyte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "price_per_terabyte", runtime.ParamLocationQuery, *params.PricePerTerabyte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PricePerTerabyteGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "price_per_terabyte__gt", runtime.ParamLocationQuery, *params.PricePerTerabyteGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PricePerTerabyteGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "price_per_terabyte__gte", runtime.ParamLocationQuery, *params.PricePerTerabyteGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PricePerTerabyteIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "price_per_terabyte__in", runtime.ParamLocationQuery, *params.PricePerTerabyteIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PricePerTerabyteLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "price_per_terabyte__lt", runtime.ParamLocationQuery, *params.PricePerTerabyteLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PricePerTerabyteLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "price_per_terabyte__lte", runtime.ParamLocationQuery, *params.PricePerTerabyteLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlansRetrieveRequest generates requests for PlansRetrieve
func NewPlansRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plans/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportsListRequest generates requests for ReportsList
func NewReportsListRequest(server string, params *ReportsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/reports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Collection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection", runtime.ParamLocationQuery, *params.Collection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "collection__in", runtime.ParamLocationQuery, *params.CollectionIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionFileCount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_file_count", runtime.ParamLocationQuery, *params.CollectionFileCount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionFileCountGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_file_count__gt", runtime.ParamLocationQuery, *params.CollectionFileCountGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionFileCountGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_file_count__gte", runtime.ParamLocationQuery, *params.CollectionFileCountGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionFileCountIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "collection_file_count__in", runtime.ParamLocationQuery, *params.CollectionFileCountIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionFileCountLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_file_count__lt", runtime.ParamLocationQuery, *params.CollectionFileCountLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionFileCountLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_file_count__lte", runtime.ParamLocationQuery, *params.CollectionFileCountLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionTotalSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_total_size", runtime.ParamLocationQuery, *params.CollectionTotalSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionTotalSizeGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_total_size__gt", runtime.ParamLocationQuery, *params.CollectionTotalSizeGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionTotalSizeGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_total_size__gte", runtime.ParamLocationQuery, *params.CollectionTotalSizeGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionTotalSizeIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "collection_total_size__in", runtime.ParamLocationQuery, *params.CollectionTotalSizeIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionTotalSizeLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_total_size__lt", runtime.ParamLocationQuery, *params.CollectionTotalSizeLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionTotalSizeLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_total_size__lte", runtime.ParamLocationQuery, *params.CollectionTotalSizeLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionTreeNode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_tree_node", runtime.ParamLocationQuery, *params.CollectionTreeNode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at", runtime.ParamLocationQuery, *params.EndedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__gt", runtime.ParamLocationQuery, *params.EndedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__gte", runtime.ParamLocationQuery, *params.EndedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ended_at__in", runtime.ParamLocationQuery, *params.EndedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__lt", runtime.ParamLocationQuery, *params.EndedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ended_at__lte", runtime.ParamLocationQuery, *params.EndedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count", runtime.ParamLocationQuery, *params.ErrorCount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count__gt", runtime.ParamLocationQuery, *params.ErrorCountGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count__gte", runtime.ParamLocationQuery, *params.ErrorCountGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "error_count__in", runtime.ParamLocationQuery, *params.ErrorCountIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count__lt", runtime.ParamLocationQuery, *params.ErrorCountLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrorCountLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_count__lte", runtime.ParamLocationQuery, *params.ErrorCountLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count", runtime.ParamLocationQuery, *params.FileCount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count__gt", runtime.ParamLocationQuery, *params.FileCountGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count__gte", runtime.ParamLocationQuery, *params.FileCountGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "file_count__in", runtime.ParamLocationQuery, *params.FileCountIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count__lt", runtime.ParamLocationQuery, *params.FileCountLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileCountLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_count__lte", runtime.ParamLocationQuery, *params.FileCountLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReportType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report_type", runtime.ParamLocationQuery, *params.ReportType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReportTypeContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report_type__contains", runtime.ParamLocationQuery, *params.ReportTypeContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReportTypeEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report_type__endswith", runtime.ParamLocationQuery, *params.ReportTypeEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReportTypeIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report_type__icontains", runtime.ParamLocationQuery, *params.ReportTypeIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReportTypeIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report_type__iexact", runtime.ParamLocationQuery, *params.ReportTypeIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReportTypeIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "report_type__in", runtime.ParamLocationQuery, *params.ReportTypeIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReportTypeStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report_type__startswith", runtime.ParamLocationQuery, *params.ReportTypeStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at", runtime.ParamLocationQuery, *params.StartedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__gt", runtime.ParamLocationQuery, *params.StartedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__gte", runtime.ParamLocationQuery, *params.StartedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "started_at__in", runtime.ParamLocationQuery, *params.StartedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__lt", runtime.ParamLocationQuery, *params.StartedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__lte", runtime.ParamLocationQuery, *params.StartedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TotalSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "total_size", runtime.ParamLocationQuery, *params.TotalSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TotalSizeGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "total_size__gt", runtime.ParamLocationQuery, *params.TotalSizeGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TotalSizeGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "total_size__gte", runtime.ParamLocationQuery, *params.TotalSizeGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TotalSizeIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "total_size__in", runtime.ParamLocationQuery, *params.TotalSizeIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TotalSizeLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "total_size__lt", runtime.ParamLocationQuery, *params.TotalSizeLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TotalSizeLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "total_size__lte", runtime.ParamLocationQuery, *params.TotalSizeLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportsRetrieveRequest generates requests for ReportsRetrieve
func NewReportsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTreenodesListRequest generates requests for TreenodesList
func NewTreenodesListRequest(server string, params *TreenodesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/treenodes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Flat != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_flat", runtime.ParamLocationQuery, *params.Flat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pluck != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_pluck", runtime.ParamLocationQuery, *params.Pluck); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Comment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment", runtime.ParamLocationQuery, *params.Comment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CommentContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment__contains", runtime.ParamLocationQuery, *params.CommentContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CommentEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment__endswith", runtime.ParamLocationQuery, *params.CommentEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CommentIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment__icontains", runtime.ParamLocationQuery, *params.CommentIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CommentIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment__iexact", runtime.ParamLocationQuery, *params.CommentIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CommentIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "comment__in", runtime.ParamLocationQuery, *params.CommentIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CommentStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment__startswith", runtime.ParamLocationQuery, *params.CommentStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_type", runtime.ParamLocationQuery, *params.FileType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileTypeContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_type__contains", runtime.ParamLocationQuery, *params.FileTypeContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileTypeEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_type__endswith", runtime.ParamLocationQuery, *params.FileTypeEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileTypeIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_type__icontains", runtime.ParamLocationQuery, *params.FileTypeIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileTypeIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_type__iexact", runtime.ParamLocationQuery, *params.FileTypeIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileTypeIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "file_type__in", runtime.ParamLocationQuery, *params.FileTypeIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileTypeStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_type__startswith", runtime.ParamLocationQuery, *params.FileTypeStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Md5Sum != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "md5_sum", runtime.ParamLocationQuery, *params.Md5Sum); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Md5SumContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "md5_sum__contains", runtime.ParamLocationQuery, *params.Md5SumContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Md5SumEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "md5_sum__endswith", runtime.ParamLocationQuery, *params.Md5SumEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Md5SumIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "md5_sum__icontains", runtime.ParamLocationQuery, *params.Md5SumIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Md5SumIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "md5_sum__iexact", runtime.ParamLocationQuery, *params.Md5SumIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Md5SumIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "md5_sum__in", runtime.ParamLocationQuery, *params.Md5SumIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Md5SumStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "md5_sum__startswith", runtime.ParamLocationQuery, *params.Md5SumStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_at", runtime.ParamLocationQuery, *params.ModifiedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_at__gt", runtime.ParamLocationQuery, *params.ModifiedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_at__gte", runtime.ParamLocationQuery, *params.ModifiedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "modified_at__in", runtime.ParamLocationQuery, *params.ModifiedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_at__lt", runtime.ParamLocationQuery, *params.ModifiedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModifiedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_at__lte", runtime.ParamLocationQuery, *params.ModifiedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__endswith", runtime.ParamLocationQuery, *params.NameEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_type", runtime.ParamLocationQuery, *params.NodeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTypeContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_type__contains", runtime.ParamLocationQuery, *params.NodeTypeContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTypeEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_type__endswith", runtime.ParamLocationQuery, *params.NodeTypeEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTypeIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_type__icontains", runtime.ParamLocationQuery, *params.NodeTypeIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTypeIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_type__iexact", runtime.ParamLocationQuery, *params.NodeTypeIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTypeIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node_type__in", runtime.ParamLocationQuery, *params.NodeTypeIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTypeStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_type__startswith", runtime.ParamLocationQuery, *params.NodeTypeStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Parent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent", runtime.ParamLocationQuery, *params.Parent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Path != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path__contains", runtime.ParamLocationQuery, *params.PathContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path__endswith", runtime.ParamLocationQuery, *params.PathEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path__icontains", runtime.ParamLocationQuery, *params.PathIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path__iexact", runtime.ParamLocationQuery, *params.PathIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "path__in", runtime.ParamLocationQuery, *params.PathIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path__startswith", runtime.ParamLocationQuery, *params.PathStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PreDepositModifiedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pre_deposit_modified_at", runtime.ParamLocationQuery, *params.PreDepositModifiedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PreDepositModifiedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pre_deposit_modified_at__gt", runtime.ParamLocationQuery, *params.PreDepositModifiedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PreDepositModifiedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pre_deposit_modified_at__gte", runtime.ParamLocationQuery, *params.PreDepositModifiedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PreDepositModifiedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pre_deposit_modified_at__in", runtime.ParamLocationQuery, *params.PreDepositModifiedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PreDepositModifiedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pre_deposit_modified_at__lt", runtime.ParamLocationQuery, *params.PreDepositModifiedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PreDepositModifiedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pre_deposit_modified_at__lte", runtime.ParamLocationQuery, *params.PreDepositModifiedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha1Sum != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha1_sum", runtime.ParamLocationQuery, *params.Sha1Sum); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha1SumContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha1_sum__contains", runtime.ParamLocationQuery, *params.Sha1SumContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha1SumEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha1_sum__endswith", runtime.ParamLocationQuery, *params.Sha1SumEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha1SumIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha1_sum__icontains", runtime.ParamLocationQuery, *params.Sha1SumIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha1SumIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha1_sum__iexact", runtime.ParamLocationQuery, *params.Sha1SumIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha1SumIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sha1_sum__in", runtime.ParamLocationQuery, *params.Sha1SumIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha1SumStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha1_sum__startswith", runtime.ParamLocationQuery, *params.Sha1SumStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha256Sum != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha256_sum", runtime.ParamLocationQuery, *params.Sha256Sum); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha256SumContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha256_sum__contains", runtime.ParamLocationQuery, *params.Sha256SumContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha256SumEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha256_sum__endswith", runtime.ParamLocationQuery, *params.Sha256SumEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha256SumIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha256_sum__icontains", runtime.ParamLocationQuery, *params.Sha256SumIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha256SumIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha256_sum__iexact", runtime.ParamLocationQuery, *params.Sha256SumIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha256SumIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sha256_sum__in", runtime.ParamLocationQuery, *params.Sha256SumIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha256SumStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha256_sum__startswith", runtime.ParamLocationQuery, *params.Sha256SumStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SizeGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size__gt", runtime.ParamLocationQuery, *params.SizeGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SizeGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size__gte", runtime.ParamLocationQuery, *params.SizeGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SizeIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "size__in", runtime.ParamLocationQuery, *params.SizeIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SizeLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size__lt", runtime.ParamLocationQuery, *params.SizeLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SizeLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size__lte", runtime.ParamLocationQuery, *params.SizeLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at", runtime.ParamLocationQuery, *params.UploadedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at__gt", runtime.ParamLocationQuery, *params.UploadedAtGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at__gte", runtime.ParamLocationQuery, *params.UploadedAtGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "uploaded_at__in", runtime.ParamLocationQuery, *params.UploadedAtIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at__lt", runtime.ParamLocationQuery, *params.UploadedAtLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedAtLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_at__lte", runtime.ParamLocationQuery, *params.UploadedAtLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uploaded_by", runtime.ParamLocationQuery, *params.UploadedBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UploadedByIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "uploaded_by__in", runtime.ParamLocationQuery, *params.UploadedByIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTreenodesCreateRequest calls the generic TreenodesCreate builder with application/json body
func NewTreenodesCreateRequest(server string, body TreenodesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTreenodesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTreenodesCreateRequestWithFormdataBody calls the generic TreenodesCreate builder with application/x-www-form-urlencoded body
func NewTreenodesCreateRequestWithFormdataBody(server string, body TreenodesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTreenodesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTreenodesCreateRequestWithBody generates requests for TreenodesCreate with any type of body
func NewTreenodesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/treenodes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTreenodesDestroyRequest generates requests for TreenodesDestroy
func NewTreenodesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/treenodes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTreenodesRetrieveRequest generates requests for TreenodesRetrieve
func NewTreenodesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/treenodes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTreenodesPartialUpdateRequest calls the generic TreenodesPartialUpdate builder with application/json body
func NewTreenodesPartialUpdateRequest(server string, id int, body TreenodesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTreenodesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTreenodesPartialUpdateRequestWithFormdataBody calls the generic TreenodesPartialUpdate builder with application/x-www-form-urlencoded body
func NewTreenodesPartialUpdateRequestWithFormdataBody(server string, id int, body TreenodesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTreenodesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTreenodesPartialUpdateRequestWithBody generates requests for TreenodesPartialUpdate with any type of body
func NewTreenodesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/treenodes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTreenodesUpdateRequest calls the generic TreenodesUpdate builder with application/json body
func NewTreenodesUpdateRequest(server string, id int, body TreenodesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTreenodesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTreenodesUpdateRequestWithFormdataBody calls the generic TreenodesUpdate builder with application/x-www-form-urlencoded body
func NewTreenodesUpdateRequestWithFormdataBody(server string, id int, body TreenodesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTreenodesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTreenodesUpdateRequestWithBody generates requests for TreenodesUpdate with any type of body
func NewTreenodesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/treenodes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersListRequest generates requests for UsersList
func NewUsersListRequest(server string, params *UsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Flat != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_flat", runtime.ParamLocationQuery, *params.Flat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pluck != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_pluck", runtime.ParamLocationQuery, *params.Pluck); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateJoined != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_joined", runtime.ParamLocationQuery, *params.DateJoined); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateJoinedGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_joined__gt", runtime.ParamLocationQuery, *params.DateJoinedGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateJoinedGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_joined__gte", runtime.ParamLocationQuery, *params.DateJoinedGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateJoinedIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "date_joined__in", runtime.ParamLocationQuery, *params.DateJoinedIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateJoinedLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_joined__lt", runtime.ParamLocationQuery, *params.DateJoinedLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateJoinedLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_joined__lte", runtime.ParamLocationQuery, *params.DateJoinedLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmailContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__contains", runtime.ParamLocationQuery, *params.EmailContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmailEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__endswith", runtime.ParamLocationQuery, *params.EmailEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmailIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__icontains", runtime.ParamLocationQuery, *params.EmailIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmailIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__iexact", runtime.ParamLocationQuery, *params.EmailIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmailIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "email__in", runtime.ParamLocationQuery, *params.EmailIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmailStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__startswith", runtime.ParamLocationQuery, *params.EmailStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FirstName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name", runtime.ParamLocationQuery, *params.FirstName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FirstNameContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name__contains", runtime.ParamLocationQuery, *params.FirstNameContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FirstNameEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name__endswith", runtime.ParamLocationQuery, *params.FirstNameEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FirstNameIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name__icontains", runtime.ParamLocationQuery, *params.FirstNameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FirstNameIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name__iexact", runtime.ParamLocationQuery, *params.FirstNameIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FirstNameIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "first_name__in", runtime.ParamLocationQuery, *params.FirstNameIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FirstNameStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name__startswith", runtime.ParamLocationQuery, *params.FirstNameStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastLogin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_login", runtime.ParamLocationQuery, *params.LastLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastLoginGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_login__gt", runtime.ParamLocationQuery, *params.LastLoginGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastLoginGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_login__gte", runtime.ParamLocationQuery, *params.LastLoginGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastLoginIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "last_login__in", runtime.ParamLocationQuery, *params.LastLoginIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastLoginLt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_login__lt", runtime.ParamLocationQuery, *params.LastLoginLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastLoginLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_login__lte", runtime.ParamLocationQuery, *params.LastLoginLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name", runtime.ParamLocationQuery, *params.LastName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastNameContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name__contains", runtime.ParamLocationQuery, *params.LastNameContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastNameEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name__endswith", runtime.ParamLocationQuery, *params.LastNameEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastNameIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name__icontains", runtime.ParamLocationQuery, *params.LastNameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastNameIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name__iexact", runtime.ParamLocationQuery, *params.LastNameIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastNameIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "last_name__in", runtime.ParamLocationQuery, *params.LastNameIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastNameStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name__startswith", runtime.ParamLocationQuery, *params.LastNameStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Organization != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization", runtime.ParamLocationQuery, *params.Organization); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "organization__in", runtime.ParamLocationQuery, *params.OrganizationIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Role != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RoleContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role__contains", runtime.ParamLocationQuery, *params.RoleContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RoleEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role__endswith", runtime.ParamLocationQuery, *params.RoleEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RoleIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role__icontains", runtime.ParamLocationQuery, *params.RoleIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RoleIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role__iexact", runtime.ParamLocationQuery, *params.RoleIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RoleIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "role__in", runtime.ParamLocationQuery, *params.RoleIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RoleStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role__startswith", runtime.ParamLocationQuery, *params.RoleStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Username != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UsernameContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__contains", runtime.ParamLocationQuery, *params.UsernameContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UsernameEndswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__endswith", runtime.ParamLocationQuery, *params.UsernameEndswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UsernameIcontains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__icontains", runtime.ParamLocationQuery, *params.UsernameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UsernameIexact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__iexact", runtime.ParamLocationQuery, *params.UsernameIexact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UsernameIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "username__in", runtime.ParamLocationQuery, *params.UsernameIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UsernameStartswith != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__startswith", runtime.ParamLocationQuery, *params.UsernameStartswith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersCreateRequest calls the generic UsersCreate builder with application/json body
func NewUsersCreateRequest(server string, body UsersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersCreateRequestWithFormdataBody calls the generic UsersCreate builder with application/x-www-form-urlencoded body
func NewUsersCreateRequestWithFormdataBody(server string, body UsersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersCreateRequestWithBody generates requests for UsersCreate with any type of body
func NewUsersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersRetrieveRequest generates requests for UsersRetrieve
func NewUsersRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersPartialUpdateRequest calls the generic UsersPartialUpdate builder with application/json body
func NewUsersPartialUpdateRequest(server string, id int, body UsersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersPartialUpdateRequestWithFormdataBody calls the generic UsersPartialUpdate builder with application/x-www-form-urlencoded body
func NewUsersPartialUpdateRequestWithFormdataBody(server string, id int, body UsersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersPartialUpdateRequestWithBody generates requests for UsersPartialUpdate with any type of body
func NewUsersPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUpdateRequest calls the generic UsersUpdate builder with application/json body
func NewUsersUpdateRequest(server string, id int, body UsersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersUpdateRequestWithFormdataBody calls the generic UsersUpdate builder with application/x-www-form-urlencoded body
func NewUsersUpdateRequestWithFormdataBody(server string, id int, body UsersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersUpdateRequestWithBody generates requests for UsersUpdate with any type of body
func NewUsersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CollectionSummariesList request
	CollectionSummariesListWithResponse(ctx context.Context, params *CollectionSummariesListParams, reqEditors ...RequestEditorFn) (*CollectionSummariesListResponse, error)

	// CollectionsList request
	CollectionsListWithResponse(ctx context.Context, params *CollectionsListParams, reqEditors ...RequestEditorFn) (*CollectionsListResponse, error)

	// CollectionsCreate request with any body
	CollectionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsCreateResponse, error)

	CollectionsCreateWithResponse(ctx context.Context, body CollectionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsCreateResponse, error)

	CollectionsCreateWithFormdataBodyWithResponse(ctx context.Context, body CollectionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CollectionsCreateResponse, error)

	// CollectionsRetrieve request
	CollectionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CollectionsRetrieveResponse, error)

	// CollectionsPartialUpdate request with any body
	CollectionsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsPartialUpdateResponse, error)

	CollectionsPartialUpdateWithResponse(ctx context.Context, id int, body CollectionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsPartialUpdateResponse, error)

	CollectionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CollectionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CollectionsPartialUpdateResponse, error)

	// CollectionsUpdate request with any body
	CollectionsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsUpdateResponse, error)

	CollectionsUpdateWithResponse(ctx context.Context, id int, body CollectionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsUpdateResponse, error)

	CollectionsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CollectionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CollectionsUpdateResponse, error)

	// DepositsList request
	DepositsListWithResponse(ctx context.Context, params *DepositsListParams, reqEditors ...RequestEditorFn) (*DepositsListResponse, error)

	// DepositsRetrieve request
	DepositsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DepositsRetrieveResponse, error)

	// EventsList request
	EventsListWithResponse(ctx context.Context, params *EventsListParams, reqEditors ...RequestEditorFn) (*EventsListResponse, error)

	// EventsRetrieve request
	EventsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EventsRetrieveResponse, error)

	// OrganizationsList request
	OrganizationsListWithResponse(ctx context.Context, params *OrganizationsListParams, reqEditors ...RequestEditorFn) (*OrganizationsListResponse, error)

	// OrganizationsRetrieve request
	OrganizationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*OrganizationsRetrieveResponse, error)

	// PlansList request
	PlansListWithResponse(ctx context.Context, params *PlansListParams, reqEditors ...RequestEditorFn) (*PlansListResponse, error)

	// PlansRetrieve request
	PlansRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PlansRetrieveResponse, error)

	// ReportsList request
	ReportsListWithResponse(ctx context.Context, params *ReportsListParams, reqEditors ...RequestEditorFn) (*ReportsListResponse, error)

	// ReportsRetrieve request
	ReportsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ReportsRetrieveResponse, error)

	// TreenodesList request
	TreenodesListWithResponse(ctx context.Context, params *TreenodesListParams, reqEditors ...RequestEditorFn) (*TreenodesListResponse, error)

	// TreenodesCreate request with any body
	TreenodesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TreenodesCreateResponse, error)

	TreenodesCreateWithResponse(ctx context.Context, body TreenodesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TreenodesCreateResponse, error)

	TreenodesCreateWithFormdataBodyWithResponse(ctx context.Context, body TreenodesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TreenodesCreateResponse, error)

	// TreenodesDestroy request
	TreenodesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TreenodesDestroyResponse, error)

	// TreenodesRetrieve request
	TreenodesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TreenodesRetrieveResponse, error)

	// TreenodesPartialUpdate request with any body
	TreenodesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TreenodesPartialUpdateResponse, error)

	TreenodesPartialUpdateWithResponse(ctx context.Context, id int, body TreenodesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TreenodesPartialUpdateResponse, error)

	TreenodesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TreenodesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TreenodesPartialUpdateResponse, error)

	// TreenodesUpdate request with any body
	TreenodesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TreenodesUpdateResponse, error)

	TreenodesUpdateWithResponse(ctx context.Context, id int, body TreenodesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TreenodesUpdateResponse, error)

	TreenodesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TreenodesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TreenodesUpdateResponse, error)

	// UsersList request
	UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResponse, error)

	// UsersCreate request with any body
	UsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error)

	UsersCreateWithResponse(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error)

	UsersCreateWithFormdataBodyWithResponse(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error)

	// UsersRetrieve request
	UsersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersRetrieveResponse, error)

	// UsersPartialUpdate request with any body
	UsersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error)

	UsersPartialUpdateWithResponse(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error)

	UsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error)

	// UsersUpdate request with any body
	UsersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error)

	UsersUpdateWithResponse(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error)

	UsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error)
}

type CollectionSummariesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCollectionSummaryList
}

// Status returns HTTPResponse.Status
func (r CollectionSummariesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionSummariesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCollectionList
}

// Status returns HTTPResponse.Status
func (r CollectionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Collection
}

// Status returns HTTPResponse.Status
func (r CollectionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
}

// Status returns HTTPResponse.Status
func (r CollectionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
}

// Status returns HTTPResponse.Status
func (r CollectionsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
}

// Status returns HTTPResponse.Status
func (r CollectionsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DepositsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDepositList
}

// Status returns HTTPResponse.Status
func (r DepositsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DepositsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DepositsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deposit
}

// Status returns HTTPResponse.Status
func (r DepositsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DepositsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEventList
}

// Status returns HTTPResponse.Status
func (r EventsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r EventsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedOrganizationList
}

// Status returns HTTPResponse.Status
func (r OrganizationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r OrganizationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlansListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPlanList
}

// Status returns HTTPResponse.Status
func (r PlansListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlansListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlansRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Plan
}

// Status returns HTTPResponse.Status
func (r PlansRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlansRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedReportList
}

// Status returns HTTPResponse.Status
func (r ReportsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Report
}

// Status returns HTTPResponse.Status
func (r ReportsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreenodesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTreeNodeList
}

// Status returns HTTPResponse.Status
func (r TreenodesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreenodesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreenodesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TreeNode
}

// Status returns HTTPResponse.Status
func (r TreenodesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreenodesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreenodesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TreenodesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreenodesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreenodesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TreeNode
}

// Status returns HTTPResponse.Status
func (r TreenodesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreenodesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreenodesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TreeNode
}

// Status returns HTTPResponse.Status
func (r TreenodesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreenodesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreenodesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TreeNode
}

// Status returns HTTPResponse.Status
func (r TreenodesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreenodesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUserList
}

// Status returns HTTPResponse.Status
func (r UsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UsersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CollectionSummariesListWithResponse request returning *CollectionSummariesListResponse
func (c *ClientWithResponses) CollectionSummariesListWithResponse(ctx context.Context, params *CollectionSummariesListParams, reqEditors ...RequestEditorFn) (*CollectionSummariesListResponse, error) {
	rsp, err := c.CollectionSummariesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionSummariesListResponse(rsp)
}

// CollectionsListWithResponse request returning *CollectionsListResponse
func (c *ClientWithResponses) CollectionsListWithResponse(ctx context.Context, params *CollectionsListParams, reqEditors ...RequestEditorFn) (*CollectionsListResponse, error) {
	rsp, err := c.CollectionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsListResponse(rsp)
}

// CollectionsCreateWithBodyWithResponse request with arbitrary body returning *CollectionsCreateResponse
func (c *ClientWithResponses) CollectionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsCreateResponse, error) {
	rsp, err := c.CollectionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsCreateResponse(rsp)
}

func (c *ClientWithResponses) CollectionsCreateWithResponse(ctx context.Context, body CollectionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsCreateResponse, error) {
	rsp, err := c.CollectionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsCreateResponse(rsp)
}

func (c *ClientWithResponses) CollectionsCreateWithFormdataBodyWithResponse(ctx context.Context, body CollectionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CollectionsCreateResponse, error) {
	rsp, err := c.CollectionsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsCreateResponse(rsp)
}

// CollectionsRetrieveWithResponse request returning *CollectionsRetrieveResponse
func (c *ClientWithResponses) CollectionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CollectionsRetrieveResponse, error) {
	rsp, err := c.CollectionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsRetrieveResponse(rsp)
}

// CollectionsPartialUpdateWithBodyWithResponse request with arbitrary body returning *CollectionsPartialUpdateResponse
func (c *ClientWithResponses) CollectionsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsPartialUpdateResponse, error) {
	rsp, err := c.CollectionsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) CollectionsPartialUpdateWithResponse(ctx context.Context, id int, body CollectionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsPartialUpdateResponse, error) {
	rsp, err := c.CollectionsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) CollectionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CollectionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CollectionsPartialUpdateResponse, error) {
	rsp, err := c.CollectionsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsPartialUpdateResponse(rsp)
}

// CollectionsUpdateWithBodyWithResponse request with arbitrary body returning *CollectionsUpdateResponse
func (c *ClientWithResponses) CollectionsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsUpdateResponse, error) {
	rsp, err := c.CollectionsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsUpdateResponse(rsp)
}

func (c *ClientWithResponses) CollectionsUpdateWithResponse(ctx context.Context, id int, body CollectionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsUpdateResponse, error) {
	rsp, err := c.CollectionsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsUpdateResponse(rsp)
}

func (c *ClientWithResponses) CollectionsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CollectionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CollectionsUpdateResponse, error) {
	rsp, err := c.CollectionsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsUpdateResponse(rsp)
}

// DepositsListWithResponse request returning *DepositsListResponse
func (c *ClientWithResponses) DepositsListWithResponse(ctx context.Context, params *DepositsListParams, reqEditors ...RequestEditorFn) (*DepositsListResponse, error) {
	rsp, err := c.DepositsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepositsListResponse(rsp)
}

// DepositsRetrieveWithResponse request returning *DepositsRetrieveResponse
func (c *ClientWithResponses) DepositsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DepositsRetrieveResponse, error) {
	rsp, err := c.DepositsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepositsRetrieveResponse(rsp)
}

// EventsListWithResponse request returning *EventsListResponse
func (c *ClientWithResponses) EventsListWithResponse(ctx context.Context, params *EventsListParams, reqEditors ...RequestEditorFn) (*EventsListResponse, error) {
	rsp, err := c.EventsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsListResponse(rsp)
}

// EventsRetrieveWithResponse request returning *EventsRetrieveResponse
func (c *ClientWithResponses) EventsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EventsRetrieveResponse, error) {
	rsp, err := c.EventsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsRetrieveResponse(rsp)
}

// OrganizationsListWithResponse request returning *OrganizationsListResponse
func (c *ClientWithResponses) OrganizationsListWithResponse(ctx context.Context, params *OrganizationsListParams, reqEditors ...RequestEditorFn) (*OrganizationsListResponse, error) {
	rsp, err := c.OrganizationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsListResponse(rsp)
}

// OrganizationsRetrieveWithResponse request returning *OrganizationsRetrieveResponse
func (c *ClientWithResponses) OrganizationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*OrganizationsRetrieveResponse, error) {
	rsp, err := c.OrganizationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsRetrieveResponse(rsp)
}

// PlansListWithResponse request returning *PlansListResponse
func (c *ClientWithResponses) PlansListWithResponse(ctx context.Context, params *PlansListParams, reqEditors ...RequestEditorFn) (*PlansListResponse, error) {
	rsp, err := c.PlansList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlansListResponse(rsp)
}

// PlansRetrieveWithResponse request returning *PlansRetrieveResponse
func (c *ClientWithResponses) PlansRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PlansRetrieveResponse, error) {
	rsp, err := c.PlansRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlansRetrieveResponse(rsp)
}

// ReportsListWithResponse request returning *ReportsListResponse
func (c *ClientWithResponses) ReportsListWithResponse(ctx context.Context, params *ReportsListParams, reqEditors ...RequestEditorFn) (*ReportsListResponse, error) {
	rsp, err := c.ReportsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportsListResponse(rsp)
}

// ReportsRetrieveWithResponse request returning *ReportsRetrieveResponse
func (c *ClientWithResponses) ReportsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ReportsRetrieveResponse, error) {
	rsp, err := c.ReportsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportsRetrieveResponse(rsp)
}

// TreenodesListWithResponse request returning *TreenodesListResponse
func (c *ClientWithResponses) TreenodesListWithResponse(ctx context.Context, params *TreenodesListParams, reqEditors ...RequestEditorFn) (*TreenodesListResponse, error) {
	rsp, err := c.TreenodesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesListResponse(rsp)
}

// TreenodesCreateWithBodyWithResponse request with arbitrary body returning *TreenodesCreateResponse
func (c *ClientWithResponses) TreenodesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TreenodesCreateResponse, error) {
	rsp, err := c.TreenodesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesCreateResponse(rsp)
}

func (c *ClientWithResponses) TreenodesCreateWithResponse(ctx context.Context, body TreenodesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TreenodesCreateResponse, error) {
	rsp, err := c.TreenodesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesCreateResponse(rsp)
}

func (c *ClientWithResponses) TreenodesCreateWithFormdataBodyWithResponse(ctx context.Context, body TreenodesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TreenodesCreateResponse, error) {
	rsp, err := c.TreenodesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesCreateResponse(rsp)
}

// TreenodesDestroyWithResponse request returning *TreenodesDestroyResponse
func (c *ClientWithResponses) TreenodesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TreenodesDestroyResponse, error) {
	rsp, err := c.TreenodesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesDestroyResponse(rsp)
}

// TreenodesRetrieveWithResponse request returning *TreenodesRetrieveResponse
func (c *ClientWithResponses) TreenodesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TreenodesRetrieveResponse, error) {
	rsp, err := c.TreenodesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesRetrieveResponse(rsp)
}

// TreenodesPartialUpdateWithBodyWithResponse request with arbitrary body returning *TreenodesPartialUpdateResponse
func (c *ClientWithResponses) TreenodesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TreenodesPartialUpdateResponse, error) {
	rsp, err := c.TreenodesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TreenodesPartialUpdateWithResponse(ctx context.Context, id int, body TreenodesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TreenodesPartialUpdateResponse, error) {
	rsp, err := c.TreenodesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TreenodesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TreenodesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TreenodesPartialUpdateResponse, error) {
	rsp, err := c.TreenodesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesPartialUpdateResponse(rsp)
}

// TreenodesUpdateWithBodyWithResponse request with arbitrary body returning *TreenodesUpdateResponse
func (c *ClientWithResponses) TreenodesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TreenodesUpdateResponse, error) {
	rsp, err := c.TreenodesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TreenodesUpdateWithResponse(ctx context.Context, id int, body TreenodesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TreenodesUpdateResponse, error) {
	rsp, err := c.TreenodesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TreenodesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TreenodesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TreenodesUpdateResponse, error) {
	rsp, err := c.TreenodesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreenodesUpdateResponse(rsp)
}

// UsersListWithResponse request returning *UsersListResponse
func (c *ClientWithResponses) UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResponse, error) {
	rsp, err := c.UsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersListResponse(rsp)
}

// UsersCreateWithBodyWithResponse request with arbitrary body returning *UsersCreateResponse
func (c *ClientWithResponses) UsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error) {
	rsp, err := c.UsersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) UsersCreateWithResponse(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error) {
	rsp, err := c.UsersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) UsersCreateWithFormdataBodyWithResponse(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error) {
	rsp, err := c.UsersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResponse(rsp)
}

// UsersRetrieveWithResponse request returning *UsersRetrieveResponse
func (c *ClientWithResponses) UsersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersRetrieveResponse, error) {
	rsp, err := c.UsersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersRetrieveResponse(rsp)
}

// UsersPartialUpdateWithBodyWithResponse request with arbitrary body returning *UsersPartialUpdateResponse
func (c *ClientWithResponses) UsersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error) {
	rsp, err := c.UsersPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersPartialUpdateWithResponse(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error) {
	rsp, err := c.UsersPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error) {
	rsp, err := c.UsersPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResponse(rsp)
}

// UsersUpdateWithBodyWithResponse request with arbitrary body returning *UsersUpdateResponse
func (c *ClientWithResponses) UsersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error) {
	rsp, err := c.UsersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateWithResponse(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error) {
	rsp, err := c.UsersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error) {
	rsp, err := c.UsersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResponse(rsp)
}

// ParseCollectionSummariesListResponse parses an HTTP response from a CollectionSummariesListWithResponse call
func ParseCollectionSummariesListResponse(rsp *http.Response) (*CollectionSummariesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionSummariesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCollectionSummaryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCollectionsListResponse parses an HTTP response from a CollectionsListWithResponse call
func ParseCollectionsListResponse(rsp *http.Response) (*CollectionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCollectionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCollectionsCreateResponse parses an HTTP response from a CollectionsCreateWithResponse call
func ParseCollectionsCreateResponse(rsp *http.Response) (*CollectionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCollectionsRetrieveResponse parses an HTTP response from a CollectionsRetrieveWithResponse call
func ParseCollectionsRetrieveResponse(rsp *http.Response) (*CollectionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCollectionsPartialUpdateResponse parses an HTTP response from a CollectionsPartialUpdateWithResponse call
func ParseCollectionsPartialUpdateResponse(rsp *http.Response) (*CollectionsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCollectionsUpdateResponse parses an HTTP response from a CollectionsUpdateWithResponse call
func ParseCollectionsUpdateResponse(rsp *http.Response) (*CollectionsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDepositsListResponse parses an HTTP response from a DepositsListWithResponse call
func ParseDepositsListResponse(rsp *http.Response) (*DepositsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DepositsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDepositList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDepositsRetrieveResponse parses an HTTP response from a DepositsRetrieveWithResponse call
func ParseDepositsRetrieveResponse(rsp *http.Response) (*DepositsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DepositsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deposit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsListResponse parses an HTTP response from a EventsListWithResponse call
func ParseEventsListResponse(rsp *http.Response) (*EventsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsRetrieveResponse parses an HTTP response from a EventsRetrieveWithResponse call
func ParseEventsRetrieveResponse(rsp *http.Response) (*EventsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationsListResponse parses an HTTP response from a OrganizationsListWithResponse call
func ParseOrganizationsListResponse(rsp *http.Response) (*OrganizationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedOrganizationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationsRetrieveResponse parses an HTTP response from a OrganizationsRetrieveWithResponse call
func ParseOrganizationsRetrieveResponse(rsp *http.Response) (*OrganizationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlansListResponse parses an HTTP response from a PlansListWithResponse call
func ParsePlansListResponse(rsp *http.Response) (*PlansListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlansListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlansRetrieveResponse parses an HTTP response from a PlansRetrieveWithResponse call
func ParsePlansRetrieveResponse(rsp *http.Response) (*PlansRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlansRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Plan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportsListResponse parses an HTTP response from a ReportsListWithResponse call
func ParseReportsListResponse(rsp *http.Response) (*ReportsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedReportList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportsRetrieveResponse parses an HTTP response from a ReportsRetrieveWithResponse call
func ParseReportsRetrieveResponse(rsp *http.Response) (*ReportsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTreenodesListResponse parses an HTTP response from a TreenodesListWithResponse call
func ParseTreenodesListResponse(rsp *http.Response) (*TreenodesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreenodesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTreeNodeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTreenodesCreateResponse parses an HTTP response from a TreenodesCreateWithResponse call
func ParseTreenodesCreateResponse(rsp *http.Response) (*TreenodesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreenodesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TreeNode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTreenodesDestroyResponse parses an HTTP response from a TreenodesDestroyWithResponse call
func ParseTreenodesDestroyResponse(rsp *http.Response) (*TreenodesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreenodesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTreenodesRetrieveResponse parses an HTTP response from a TreenodesRetrieveWithResponse call
func ParseTreenodesRetrieveResponse(rsp *http.Response) (*TreenodesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreenodesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TreeNode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTreenodesPartialUpdateResponse parses an HTTP response from a TreenodesPartialUpdateWithResponse call
func ParseTreenodesPartialUpdateResponse(rsp *http.Response) (*TreenodesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreenodesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TreeNode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTreenodesUpdateResponse parses an HTTP response from a TreenodesUpdateWithResponse call
func ParseTreenodesUpdateResponse(rsp *http.Response) (*TreenodesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreenodesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TreeNode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersListResponse parses an HTTP response from a UsersListWithResponse call
func ParseUsersListResponse(rsp *http.Response) (*UsersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersCreateResponse parses an HTTP response from a UsersCreateWithResponse call
func ParseUsersCreateResponse(rsp *http.Response) (*UsersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUsersRetrieveResponse parses an HTTP response from a UsersRetrieveWithResponse call
func ParseUsersRetrieveResponse(rsp *http.Response) (*UsersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersPartialUpdateResponse parses an HTTP response from a UsersPartialUpdateWithResponse call
func ParseUsersPartialUpdateResponse(rsp *http.Response) (*UsersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersUpdateResponse parses an HTTP response from a UsersUpdateWithResponse call
func ParseUsersUpdateResponse(rsp *http.Response) (*UsersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9DXPbNtLwX8HwvZm2qSwrtpP2/M5Nz5coredxYp8/2uvVeWiIXEloQIIFQNtqxv/9",
	"GQCkSEqkvkhKdMOZzjSmiN3F7gLYT/Cz5TAvYD74UljHny3hjMHD+p9vGKXgSMJ89VfAWQBcEtC/Dckj",
	"kRN7yOGPEHxnop79jcPQOrb+334CcT8Ct/9Ov/8ufr3vh5711LGIqwZywO65TyfWseQhdCw5CcA6togv",
	"YQRcvedjD9SbHn48A38kx9bxwatX0zeF5MQfqRcZH2Gf/IljqoeMe1hax1bIiZXzvsR8BNLmEFDiTEdh",
	"Ss+H1vFvi+d0rcdeJkPNrD52FJnECz3r+ODl0XdH3x++PvquY3nENw/3pk+/VxRwANtnLuSQ64eU4gGF",
	"GcYk5Iec5gwr4Gc87Em98UdIOLjW8W9KBhGDZ9hnwH+cjmeD38GRCm2iGZdKoELWpiBFgveIH//98ktX",
	"gxl55olysRCvQs/DfFK7EOfYLsifYA8m0mCbcqaXtwVkRWRTZpitRxIJnlhGXCShs2jgG+YPiRG+wYU5",
	"x5M5bs6xYLpWUsQvoC6P829hiEMq87h1/NlyQTicBEYJrRfo7vqX0zd9+9f+yeXZr3doD10/EAfQr4A5",
	"ndz6L9Ddv29OLq/70a//DjGXEP/0/vzD9U/mh/fMl2OqJgAa029WGrDVsaZgrI4VjUuRn0gtIn9W4/NI",
	"P1CIDx41KYfq34fm30fq30ePCS0HncPO0cc8ub+FgAmSs8M4meNptbX6XqkYpqmTTa3T7H751LHGWIzB",
	"tbHMLEYXS9iTRAt/6c686sm27k4VYA6+LNop5l7nMCJCAl88myUHhnrByLokU4TEEpat0yv1Urx1hAFl",
	"2C2JNhTA19aRGzUoRztm9oeUFnbMUTpzhqYFNiuPiLS8PaJ/D/52lR78snwGzhm3HRb6WSDEl6+PrNR5",
	"+PeDg8PD7w56h6+/f3X03Xeve71eJ7P9F6BKrZshobAlVKsuZSHVzluOhebBEoNjEsysD3ulhXWj380u",
	"rwrsx/kVkCGq2Ip8ruff/HqaW6aV+zVVG/pFMklvfhvPaiNizV4YMySrBJfRLLro5asecsaYY0cCF4hx",
	"NIQH4F10BlI96SCXjIgUCPsu+ud+d//b/b19GzGfTrpmW5i6Da96anNWoxSK//3t9vah+89v9z5++zdr",
	"JU6qWaaIzuPmB+bCdLXmqfa707O+0s13hILW13fnZ2/7l/oRoy5w/fDN+dlZ/8316fkH9UOid/rH88sf",
	"Tz6c/vck/vk8e/zEuq4wWR3LwLc6VgLT6lhpGLkqfz5jpWT1YmUtDiheycj5I2QSJ45Bid09x4/Ytb8d",
	"rUDNi+KFeIFHxFcGVyLuMyJyLYLoDIRH7AWK9pcHh7l7DTxm37PGUgbH+/s4IN3oYZfx0T52NEyx/wMb",
	"DgXIfxz1erdhr3fwmhKPyH+87PWsztqsCzjcExaKzUg4qIIEDiKkcnWPMW0x5biJq8gscq1b0e1MdHFw",
	"Yz0JRl5nK7ctyy329teTlnaWWlltWVbGRV1PUmlDohXYlgWWseLWk9sFxa28ti0vxfQ15XQJAePtVrht",
	"SRm2rymraw6gPMRWWluWVsz4NeV1I4C3stqyrEwYfjU5SWec9r3a3HQjctNFgopXYaGYHOZ5URJkqVrp",
	"dEAcPJ8VyNLRnvvKFiZElxp7eDA/NB0wxHt/nuz9t7f394+fDw+e/pYnOw8kdrHEWmKuS5QIML1IT/Op",
	"kL6EY1NNW6xZSkT2KhmETFxymlTcJCAWcLBd47PZHnPJkJRNEY7xyxxZHPVWlsVRL18WYowPXr3Ogf36",
	"aGXYr48KYJM/ofY8VAW50AXLUW20hUsRh3LMOPkTXDtJ92Q38aXbWGYD72iq7d8Z8cEtnM18htHDJBuB",
	"NU862TV/tHQTHhIupJ2zg+u0wHw2X9jYkeQ+JzfxFgQZKftAoIcxyDFwJMdEoFAAR2LMQuqiASDJQdkQ",
	"CAtkIHXRjS9AsdK8T3whAbuIDZELFCTxRyg+gruKF0Tq0/rE0DElcsAYBeMnEGELiYfDFYkEQ6ODfUTZ",
	"CBFfMkMKdj3iI0EkpBFfKdBISCxDUYg+DIDH6fZCEuQYyxSTxoonlKIAuEeEUJqFHogcs1AieFRHF5F0",
	"grBQABRb5Bi8DGUx1kXUUSykTdmI+JtvThrGykqz5KBfbioxunQnv2Q0SeZuP3+WXWVrZNPmd6EoNZTd",
	"d1xTamSva7EtqLBSW08EdSOTqqD6aV2bavWcGScO2AFwWwLHg4nMHjQuOMTD1Mpwf++H21v3c6/z/dPX",
	"Pxzf3nbNXwdP3/yQe3pVmdWap7Y4x5VfkTd/+AwGym+ZymmOfpeIgOKJXVhn6Iee7bAggjd/sgbjiSAO",
	"ptO6vfxqxYmQ4NmZpfV5CVsytM9QmqErj4hclAWMZHy71UIJaLuyUpx5waSwSCYxtSswtBZjSbs6828u",
	"rZGqsSaqxhqozWueuNa8lZwOo6Rpt2OFgql5M9Kc+TnLs0YFqbxMKn/1FOl7gYam1DGrZxnNiGqyUryO",
	"mZhh2cJdOi23/DKW/5xe/2oKWdSJqwtT3vYvzq9Or9XTOKuXLkdRI6yOFb2VW3UyNW7ycJ68fX+qC15O",
	"lLWqMd5cmdIZ5croBz+f9n8xj34mysxJEaCHWx1LjbE6lnkzl4qkYC6PjMv+j6dX1/3L/luF5nJa3mkI",
	"ujg7P3lrfrqJvDf9w08nVz+Zxz/pUmP98LJ/cXb65uQ6BhWX3EY1QO8vzvrXffuX0+uf7P7l5fnllakG",
	"8gIKEtAvRI5RX2mB0AOu+5fvTz8oaPa/frVj1lwrG1tHM9FgYsxv7MyUCiVTUvyJpmB1LEO01bESQnUh",
	"0TxhVseaR5/L3PwAVU2l5NO4b6lQk8N8Cb60o00hS+iP4APXTg5GN5dnaMg4ctmDr2QfuS4oAqA8Pe0E",
	"vYjpetG99W/9S5Ah9wW6u/vAfLi7Q2TuPUQE8pmG8GIa9HmBXrw7Peu/UEY9Gd76MRoi/K/klAg1NY2m",
	"21Ug4PhY/YEQQidCwbu763WPur27u46mlSjtUqzRwkEuBOC7AjF/OosBEH9kIAQchMboI4wCkHjAHvcG",
	"2PkELjoOJscOxUIc33Ujcd910amvsQxDGXLoGCgxpSLlPXMQjN4r2tGQMw9hf5ILMQLBYYS5S0EIw2RA",
	"QjKOR4A0Nb6rNN/toICze+KCiwQmLorcga/FNwbKGN8DwmgMmMrxBHFw1OTSaM1u92YMzqe77pSPPtMO",
	"tuYuwsjFEg+wAPRHCHyiRBcfC0iyaGZg3HFOO+hhTJyxgaQcZH/IuAzViv3/iLiAKZ3odzUM5aJr+FrP",
	"Rkb3lJpFwjFgQk6LeMm4kpRiDBtmZhar2p3Q0jSAHOYLiX2J/NAbAFdj1JwIiC46lV8ZnXQoYK5m5gH6",
	"2nsgVDD/G8TJaByR47OHbKSECBQwIYiiiHHEAQvmK/o6aBBKpf4BcH32+g7EmsYGFDyBMCcC0AAcHAo9",
	"CXh0QAhyDzFpHYPEiaePfYQ5RDNSDCD+PQhJRlrDuzmO+dLC1XLB51VNraYHqTcJ/y5lbbFLt4NYN1YM",
	"/7z+JNog+bMKkqeADCaV9Q1V5UUkxkdk2ac1alrfr3U1O5FiC7/NxLWZuHaT2Xombi58mrs2F/nd8y62",
	"aSKZccdTvl3sbndiDzzPKZttFGv93sr93vwGq+eXZi2dWF3R+G0TsG0CtvkJ2L9632O8C6za/9jWlLQ1",
	"Je2W1taUbKemJG+nWrA9KWcBnJATOblSM49dXfaJwEloQj1KsNGj2Lc+tu5xSOWeAK1We3ovjDeigPwP",
	"TKwnBZv4QzbPtZ/VWPRW8QNTdMFBAL83sfUrnetHF5zcYwno5OI0pY5mnHl2D1wYaC+7vW5Pq0UAPg6I",
	"dWwddnvdwygAoCe0jwOyn2ywe0L3QxIQ++rXEeidWe3LmopT1zqeuxmKgNB179o9xR4ooepwSHZuH6ZR",
	"4ajI28S3Zch9tQ51nFkJXDNVB8MTnuqScqsTXT+Xl3x/6sziux4DIj6RBFNEfBceTW5AB9BTqE20XBNU",
	"hN0UuK+J/heNZ0iA6kB+KEDtgz5i3AUe53qWIY7ezUOdaPYs5hMkAHM1SeBeEWjzykLAOkglAuYLo/sH",
	"vZ5ZAjrGpM/oYJqY2/9dmC0ngbewd2lxL7ReItlZZVakVq/0Wvzt41Pns6JY4pFSPrMKrY9q0IyKZzQ7",
	"i+P8HjgnLiBFxHvmAn1PHonfpUTIr79BglGgEyVNFxzG1TIkUp8b6J/wKMF3zfRu1bEmAnDIcIKSaBIS",
	"YRAwro7kZKEo+RQtr5WW1Rt9yiOMhhRLpG0do+gBDXVqzajgPaahriPKUwZbjV1bycKBABmtZ60lSFlm",
	"Bp9e3MR3aKgrEXKRagLXw1rHdS95tOVc65ZQGQcE4ktgslfDZG6N+djJm9MqGG1brTNMfLGMQ6tBU8qp",
	"NLUaaKRa4gg8YmdNBXwfUkkCCpFmIw9PlNErQK2WKJDjMM/Deokpo06n9oeYCuisSpefoWnqeCz1NISc",
	"6HNZ2V/W6nzQVTgbi8kU8iw8ovKH2fZIlhgKa56M1UtO0bFEVukrXjYRlkJBN+cSXZtL9ZtLeSPjyyvX",
	"1T31v3JbloFQZpsyEEh5IpqxHUW01LoFGRyrbztfrIWdPzZzldZut8A0MZVuhvX4Fp2NSvjykOX0v+YY",
	"a0VVf0WynYe68SGZD2r3h2YeXTUfonkoaXVcXeWQzYWVqpleMHrL/vDGjnCOF9yxAiZyHN43oZDMQ47x",
	"IT2QY+bqqjeB79UOGlDs73GgWsOIP2QL3VXjilom1AZC/ou5k8o4NN+4r/iQhve49/DwsKcUcC/kFHyH",
	"uSbQXwaBp9cd5nJfA45rRDYHmYlERqU/M2r1sgamVaVJefGUz8R9Kg6q6Jpn4vxM4OEKJBLhQFeRood9",
	"HWZB36JLkJzAPSCPPBI/CtZPS4uFLkHeQydJIOXH/rUJocQhFVNcu4de2La23fZH6j/Yp3KfSkCUsU9h",
	"ILRm+6GnyInCFHMDY+txP7ZE97vdbgaAhEc5HY0QQlcA6N3p2XX/8qp/bV/3/3NtX13035iXdfkypYgS",
	"IbsxNtuFQI7/8cEsNRMoUsttyDiQkY8+wSRCifSbixZdzLxlcaITFPrkj1BZbHpDMwcJIi74MkIfVcLG",
	"oKfHe1QtlnYzsyq8s22zev3WoXFn3KrxltX4AnPlR9wErjlCGqzL1Z9thXfTVHzELcRT6qRbAPnp6blt",
	"AGGepTQG5xMSQIddL5RYDijYUaQbj9RKk9O+CxDSdF2YVOJXQi0Ek940fHBvfZ00wOiod4jIUPerEE/B",
	"1W0X2qN9wCJaUwTchWbXl7lmviB7sPcM7MGotrjpybWoDrbNrOV7wpku5N2GJ1I9zXWHJZLv+aSxrFIe",
	"thTiXNSoMqiwEdi6pZYisUhoKzbylxLkXFipIrbTDdnepuvadF1b3dTmXirQ7OwHw3Y78RQttc979tNo",
	"1WzCGaiVHtZzkJt5YM+QuYNDe4YCWpsIqjy8s188rAVqxdo4A7mp2pghcyfamKGA1iYCWokI6szH/4V6",
	"OHO5En1/cL6ws6B3M9XomeoEzXR95rR3pnpFV68G1bSVq6eKQJQpqIpAkArIaEZJVUxMrTVVEZJytZzp",
	"FvKqNqAUzErPlhm4zTxZMkTu4FzJ4Kc1Mb9KC0e31O3awVBEVOdZbKWAJ/1puLpi7G3BxbYz1XHeoOpq",
	"i0ikz6DUYvrpvWp1Gu41lmZnjfSn7ApyRl9mGiVL9jtCJXBD3LSTNC4bTFdXLqFwxULMghMrdd1tNUdg",
	"DLBSaykNtJmmUkLhDuykBDmtg+dVWkjZO5U30Ndk/MYpnRkYuw8JZwiqOSScwUUrYOCmBeSZ+7TLDN9Y",
	"D7Igdq8GaXpq1oI0Klqee5vqQJvObdO5bTp3Z5dVFAfjeMVJmgRkpXZhFmwzLcM0jTuwDdPoaT2cryYr",
	"s9bdm7kdaQpDXmpihQs6C7vcJkHJlIKBUCajYCCQ8kQ0I58Q0VJrOsHg2LRF+6+fxjMBcLvJ2bw0ieVW",
	"YBZSmZWYhUSqI6oZK3OGplpXaBbXiit1K7kIHbesIxMRRW3bPMS28xAmEl11FkKL8xnkIPTsq9bldPVm",
	"0xMR52la2x6W9sqk9sqk9sqkZ1S2H1C8+5SoIqL2iOUfIZPYHkwkiI12ldT4jQPEMzB2HynOELQ9AWwc",
	"O56BsS4Da45tNunaorRhUofDkTXSWr9j235HxvCs2v1IC/cZeCFpXlSt5+psaroTcqFobJ2PHV1N7cJQ",
	"6Yy9/SuqizCXc2KKoZZxbIqhknqIbYYDtIC+Wp2iYrwlEheb3Qcak1LxhaA5YDe2ywtg7d4+zyWsZjs9",
	"FyetkLHt1dttHKmNI/3F4kicOGAHwG0JHCsHPQ+K+Q79OlCKtvTNIC0lqvZIVw5ZS7Q6Jm/T2ylyMNLK",
	"WErXZemz+hSS8qvqiJ0Yn7KNmWw7ZqL95KpjJUqYzyBGouZetR5zUFrU9OjIpaGybRZbfFCkUJXsnsiF",
	"tLFvVggNmiSdLbZXFGCllbJ306aLdO8gk5ja+vv+lUGqQouy0BqlRWnStqdFaay0Uvau7+m3jatt42rb",
	"uNo2rraNq23jatu42jauto2rbePq6gnK2WY+nZ2cb/yzCu+6ZFzadbT6pUCXywxlAJVJEGUAkcpIaka6",
	"KEtSrVmjDKpNk0dtz3Xbc/0X6LnOrYktFwWqIPTTtHjPFoM8FUR21grnbCUrZ+L5deTl4nxGm5nbdmYu",
	"ytFUnZszAn0G2Tkz/6r1WXIAn7nQ9AzddUxnW8NcENf21MZRYmg5p2MKpIzDMQVCKiGlGY5GQk6tTsYU",
	"Tbk7zHVwas69XXdwOV1KgSmjTSkwpCJymqFRaYJq1akUonJa1YYr23Bl2VJrz31li9DbRP2ioeV2pSmQ",
	"MnvSFAiphJRm7EcJObXuRlM05fYij7n688xVhrpSMCuNdc3AbWawK0PkDqJdGfy0JuZXGe9qm0bappH1",
	"UlZnfZOwomAupDw/e2su3nvHqAs8usrv7Kz/5vr0/IO5wC+uc9I/nl/+ePLh9L8n8c/n2U9x5pLNXChO",
	"dCXYdK7rrK/+p8myOlYa2xoZsCnGkkqegCml6QkYUhE5DdH5FEH1Kn6CqG2Z2qxlSn+rdSNzOQpkboBS",
	"jsutPwOhzNIzEEh5Ipqx4CJaal1rBkc5yzjgYEffNrLrsJIL4FdqMS/A0UzruZDgHVjShbTQLQiocd9W",
	"zR05xi83jULEY0t+InQKpdRXQqdQSDXENORboQk99X4udIqn3I4rxvjg1esSChWNLq1SUzgllWoKh1RF",
	"UGMUK6GobtWaYiqpXJsW1JQqpWlOEc1WymdKFc6s3gHVfm64/dxwAz83HAMeTHb/1eGElmf28eFrDvCB",
	"uVBluVrHCphYVMtjSmRS1TyOfvD1N0gyJRSi1AHpK8GEXFSPYwBFZVIg5L+YO6mMRzFrLg1szYk0tMe9",
	"h4eHPSWrvZBT8B3mglsOvKc1E3O5r8G6WOIyAJ9m68ee5lTqZeXsqq9IbFr26AIFCfMKdsWGEr3tn/Wv",
	"+4gNUawmCxToLQjJ2aSqej5FK4pR1lLSdzQ/6w8sKfgaqAWw0ZJtS0m3VEo61b2qi0nrV75eYzcLxULp",
	"jFsN3qoGX2AuCaY3gWtO4eaqcfXWwYXSt8R+qslIWICllK1QCPfp6Xmt+nCRnWkUM2VnhvrBjJ2pFzz2",
	"J9FaIKYYHHyJiLj1seOAEGRAQbkFJuWmmaUUNhTAF1gXX+TC+CLM5l7jzWalmk3vq7hRNLY9Ffk3E2MJ",
	"9u+M+OBWFjJJwaw0wDYDt5kBtgyROwiwZfDTmphf6aU/HiZ0E9XVA8tlhSIQZRJCEQhSARnNSAPFxNSa",
	"AYqQlO3j4ULam1aaJqPLdvIkcMq18iRwSFUENaWZJ0VRzd08Caa2nedLbufJbczBQtqUjWZmV+b0SkBW",
	"aupkwTbT0knTuANDJ42e1sP5Ks0cDXfTs2o6uNxRlQJT5qRKgSEVkdOMcypNUK3HVArRplXj7X1qW61S",
	"Z9lmkt2e0GliKj2r59pyTt6+P9XNNCeuR0ybzc2Vacu5EVFTzs+n/V/Mo58JPAAvulaO0fw2G43D6lgK",
	"sNWxDLh1LpVjtOxtchpCqWvkNARSnoiGXBxnaKn3xjiNo6FXxYUC+KaHdTy2nE4mUMroZQKFVENMM/Qz",
	"RU+tOprgWVFPt1JMpXbebRRStUnt6pPaOhdRaz2ZwlBTUmwWdKmEWBbYVmvIFOp6EmHtlXk7WVBV1zjF",
	"CfeGlzdVqcdtadO2lbaWsqaqNbe2iqYaj6kCDFVUMs0cWk/PZ3HnVTC9GYPzCQmgw64XSiwHFOyo5ACP",
	"1CqS6UokpDiG2OB3cORXQim5QNh3o5IF99bXdRsYHfUOERnqUifiKbgDClHk5gGLpPypoFDjS1sPf1l7",
	"rZlL4enp6f8CAAD//+Ol8To8LgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
