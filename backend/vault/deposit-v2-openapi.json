{"openapi": "3.0.2", "info": {"title": "NinjaAPI", "version": "1.0.0", "description": ""}, "paths": {"/api/deposits/v2/register": {"post": {"operationId": "vault_deposit_api_register_deposit", "summary": "Register Deposit", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterDeposit2Response"}}}}, "404": {"description": "Not Found"}}, "description": "Registers a new `Deposit`.", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterDeposit2Request"}}}, "required": true}}}, "/api/deposits/v2/chunk": {"get": {"operationId": "vault_deposit_api_has_chunk", "summary": "Has Chunk", "parameters": [{"in": "query", "name": "depositId", "schema": {"title": "Depositid", "description": "ID of target `Deposit`", "type": "integer"}, "required": true, "description": "ID of target `Deposit`"}, {"in": "query", "name": "flowIdentifier", "schema": {"title": "Flowidentifier", "description": "Unique identifier of file. Must be a pure function of the file underlying the chunk and globally unique.", "type": "string"}, "required": true, "description": "Unique identifier of file. Must be a pure function of the file underlying the chunk and globally unique."}, {"in": "query", "name": "flowFilename", "schema": {"title": "Flowfilename", "description": "Name of file being uploaded as appearing on user filesystem", "type": "string"}, "required": true, "description": "Name of file being uploaded as appearing on user filesystem"}, {"in": "query", "name": "flowRelativePath", "schema": {"title": "Flowrelativepath", "description": "Relative path of file as appearing on user filesystem", "type": "string"}, "required": true, "description": "Relative path of file as appearing on user filesystem"}, {"in": "query", "name": "flowChunkNumber", "schema": {"title": "Flowchunknumber", "description": "1-based index of the current chunk in the sequence of chunks.", "minimum": 1, "type": "integer"}, "required": true, "description": "1-based index of the current chunk in the sequence of chunks."}, {"in": "query", "name": "flowChunkSize", "schema": {"title": "Flowchunksize", "description": "Maximum chunk size in bytes for this file", "minimum": 1, "type": "integer"}, "required": true, "description": "Maximum chunk size in bytes for this file"}, {"in": "query", "name": "flowCurrentChunkSize", "schema": {"title": "Flowcurrentchunksize", "description": "size in bytes of the current chunk", "minimum": 0, "type": "integer"}, "required": true, "description": "size in bytes of the current chunk"}, {"in": "query", "name": "flowTotalSize", "schema": {"title": "Flowtotalsize", "description": "size in bytes of file being uploaded", "minimum": 0, "type": "integer"}, "required": true, "description": "size in bytes of file being uploaded"}, {"in": "query", "name": "flowTotalChunks", "schema": {"title": "Flowtotalchunks", "description": "number of chunks comprising the file", "minimum": 1, "type": "integer"}, "required": true, "description": "number of chunks comprising the file"}, {"in": "query", "name": "flowMimetype", "schema": {"title": "Flowmimetype", "description": "user-reported mimetype of file being uploaded", "type": "string"}, "required": true, "description": "user-reported mimetype of file being uploaded"}, {"in": "query", "name": "flowUserMtime", "schema": {"title": "Flowusermtime", "description": "ISO8601-formatted modification time of file on user filesystem", "type": "string", "format": "date-time"}, "required": true, "description": "ISO8601-formatted modification time of file on user filesystem"}], "responses": {"204": {"description": "No Content"}, "200": {"description": "OK"}, "404": {"description": "Not Found"}}, "description": "Determines whether Vault has posession of the described chunk\n\nReturn statuses:\n* ``200`` - Vault in posession of described chunk\n* ``204`` - Vault *not* in posession of described chunk; please send chunk\n* ``404`` - indicated `Deposit` does not exist or has already been\n  finalized and will accept no further chunks"}, "post": {"operationId": "vault_deposit_api_send_chunk", "summary": "Send Chunk", "parameters": [], "responses": {"204": {"description": "No Content"}, "200": {"description": "OK"}, "404": {"description": "Not Found"}}, "description": "Send a chunk of data comprising a file of a `Deposit` to Vault.\n\nReturn statuses:\n* ``200`` - On success", "requestBody": {"content": {"multipart/form-data": {"schema": {"title": "MultiPartBodyParams", "type": "object", "properties": {"depositId": {"title": "Depositid", "description": "ID of target `Deposit`", "type": "integer"}, "flowIdentifier": {"title": "Flowidentifier", "description": "Unique identifier of file. Must be a pure function of the file underlying the chunk and globally unique.", "type": "string"}, "flowFilename": {"title": "Flowfilename", "description": "Name of file being uploaded as appearing on user filesystem", "type": "string"}, "flowRelativePath": {"title": "Flowrelativepath", "description": "Relative path of file as appearing on user filesystem", "type": "string"}, "flowChunkNumber": {"title": "Flowchunknumber", "description": "1-based index of the current chunk in the sequence of chunks.", "minimum": 1, "type": "integer"}, "flowChunkSize": {"title": "Flowchunksize", "description": "Maximum chunk size in bytes for this file", "minimum": 1, "type": "integer"}, "flowCurrentChunkSize": {"title": "Flowcurrentchunksize", "description": "size in bytes of the current chunk", "minimum": 0, "type": "integer"}, "flowTotalSize": {"title": "Flowtotalsize", "description": "size in bytes of file being uploaded", "minimum": 0, "type": "integer"}, "flowTotalChunks": {"title": "Flowtotalchunks", "description": "number of chunks comprising the file", "minimum": 1, "type": "integer"}, "flowMimetype": {"title": "Flowmimetype", "description": "user-reported mimetype of file being uploaded", "type": "string"}, "flowUserMtime": {"title": "Flowusermtime", "description": "ISO8601-formatted modification time of file on user filesystem", "type": "string", "format": "date-time"}, "file": {"title": "File", "description": "Content of chunk", "type": "string", "format": "binary"}}, "required": ["depositId", "flowIdentifier", "flowFilename", "flowRelativePath", "flowChunkNumber", "flowChunkSize", "flowCurrentChunkSize", "flowTotalSize", "flowTotalChunks", "flowMimetype", "flowUserMtime", "file"]}}}, "required": true}}}, "/api/deposits/v2/finalize": {"post": {"operationId": "vault_deposit_api_finalize_deposit", "summary": "Finalize Deposit", "parameters": [], "responses": {"200": {"description": "OK"}, "400": {"description": "Bad Request"}, "404": {"description": "Not Found"}}, "description": "Signals that a previously-registered `Deposit` is complete.\n\nFinalizing a `Deposit` carries the implication that  all chunks for all\nfiles the client intends to upload have been sent. Sending any further\nchunks after this handler is called is an error.\n\nIdempotent.\n\nReturn statuses:\n* ``200`` - `Deposit` successfully finalized\n* ``400`` - attempt to finalize `Deposit` comprised of files for which not\n  all chunks have yet been received by Vault\n* ``404`` - indicated `Deposit` does not exist", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FinalizeDepositRequest"}}}, "required": true}}}, "/api/deposits/v2/terminate": {"post": {"operationId": "vault_deposit_api_terminate_deposit", "summary": "Terminate Deposit", "parameters": [], "responses": {"200": {"description": "OK"}, "400": {"description": "Bad Request"}, "404": {"description": "Not Found"}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TerminateDepositRequest"}}}, "required": true}}}}, "components": {"schemas": {"RegisterDeposit2Response": {"title": "RegisterDeposit2Response", "description": "Description of the newly registered Deposit", "type": "object", "properties": {"deposit_id": {"title": "Deposit Id", "type": "integer"}}, "required": ["deposit_id"]}, "RegisterDeposit2Request": {"title": "RegisterDeposit2Request", "description": "Description of Deposit to register.\n\nOne and only one of `parent_node_id` and `collection_id` must be supplied.", "type": "object", "properties": {"parent_node_id": {"title": "Parent TreeNode ID", "description": "id of TreeNode to root the new Deposit. TreeNode must be owned by requesting User's Organization. TreeNode must be of type COLLECTION or FOLDER", "type": "integer"}, "collection_id": {"title": "Parent Collection ID", "description": "id of Collection serving as the root of the new Deposit. Must be owned by the requesting User's Organization", "type": "integer"}}}, "FinalizeDepositRequest": {"title": "FinalizeDepositRequest", "type": "object", "properties": {"depositId": {"title": "Depositid", "description": "ID of target `Deposit`", "type": "integer"}}, "required": ["depositId"]}, "TerminateDepositRequest": {"title": "TerminateDepositRequest", "type": "object", "properties": {"depositId": {"title": "Depositid", "description": "ID of target `Deposit`", "type": "integer"}}, "required": ["depositId"]}}}, "servers": null}