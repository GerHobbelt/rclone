// Package vault provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package vault

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// FinalizeDepositRequest defines model for FinalizeDepositRequest.
type FinalizeDepositRequest struct {
	// DepositId ID of target `Deposit`
	DepositId int `json:"depositId"`
}

// RegisterDeposit2Request Description of Deposit to register.
//
// One and only one of `parent_node_id` and `collection_id` must be supplied.
type RegisterDeposit2Request struct {
	// CollectionId id of Collection serving as the root of the new Deposit. Must be owned by the requesting User's Organization
	CollectionId *int `json:"collection_id,omitempty"`

	// ParentNodeId id of TreeNode to root the new Deposit. TreeNode must be owned by requesting User's Organization. TreeNode must be of type COLLECTION or FOLDER
	ParentNodeId *int `json:"parent_node_id,omitempty"`
}

// RegisterDeposit2Response Description of the newly registered Deposit
type RegisterDeposit2Response struct {
	DepositId int `json:"deposit_id"`
}

// TerminateDepositRequest defines model for TerminateDepositRequest.
type TerminateDepositRequest struct {
	// DepositId ID of target `Deposit`
	DepositId int `json:"depositId"`
}

// VaultDepositApiHasChunkParams defines parameters for VaultDepositApiHasChunk.
type VaultDepositApiHasChunkParams struct {
	// DepositId ID of target `Deposit`
	DepositId int `form:"depositId" json:"depositId"`

	// FlowIdentifier Unique identifier of file. Must be a pure function of the file underlying the chunk and globally unique.
	FlowIdentifier string `form:"flowIdentifier" json:"flowIdentifier"`

	// FlowFilename Name of file being uploaded as appearing on user filesystem
	FlowFilename string `form:"flowFilename" json:"flowFilename"`

	// FlowRelativePath Relative path of file as appearing on user filesystem
	FlowRelativePath string `form:"flowRelativePath" json:"flowRelativePath"`

	// FlowChunkNumber 1-based index of the current chunk in the sequence of chunks.
	FlowChunkNumber int `form:"flowChunkNumber" json:"flowChunkNumber"`

	// FlowChunkSize Maximum chunk size in bytes for this file
	FlowChunkSize int `form:"flowChunkSize" json:"flowChunkSize"`

	// FlowCurrentChunkSize size in bytes of the current chunk
	FlowCurrentChunkSize int `form:"flowCurrentChunkSize" json:"flowCurrentChunkSize"`

	// FlowTotalSize size in bytes of file being uploaded
	FlowTotalSize int `form:"flowTotalSize" json:"flowTotalSize"`

	// FlowTotalChunks number of chunks comprising the file
	FlowTotalChunks int `form:"flowTotalChunks" json:"flowTotalChunks"`

	// FlowMimetype user-reported mimetype of file being uploaded
	FlowMimetype string `form:"flowMimetype" json:"flowMimetype"`

	// FlowUserMtime ISO8601-formatted modification time of file on user filesystem
	FlowUserMtime time.Time `form:"flowUserMtime" json:"flowUserMtime"`
}

// VaultDepositApiSendChunkMultipartBody defines parameters for VaultDepositApiSendChunk.
type VaultDepositApiSendChunkMultipartBody struct {
	// DepositId ID of target `Deposit`
	DepositId int `json:"depositId"`

	// File Content of chunk
	File openapi_types.File `json:"file"`

	// FlowChunkNumber 1-based index of the current chunk in the sequence of chunks.
	FlowChunkNumber int `json:"flowChunkNumber"`

	// FlowChunkSize Maximum chunk size in bytes for this file
	FlowChunkSize int `json:"flowChunkSize"`

	// FlowCurrentChunkSize size in bytes of the current chunk
	FlowCurrentChunkSize int `json:"flowCurrentChunkSize"`

	// FlowFilename Name of file being uploaded as appearing on user filesystem
	FlowFilename string `json:"flowFilename"`

	// FlowIdentifier Unique identifier of file. Must be a pure function of the file underlying the chunk and globally unique.
	FlowIdentifier string `json:"flowIdentifier"`

	// FlowMimetype user-reported mimetype of file being uploaded
	FlowMimetype string `json:"flowMimetype"`

	// FlowRelativePath Relative path of file as appearing on user filesystem
	FlowRelativePath string `json:"flowRelativePath"`

	// FlowTotalChunks number of chunks comprising the file
	FlowTotalChunks int `json:"flowTotalChunks"`

	// FlowTotalSize size in bytes of file being uploaded
	FlowTotalSize int `json:"flowTotalSize"`

	// FlowUserMtime ISO8601-formatted modification time of file on user filesystem
	FlowUserMtime time.Time `json:"flowUserMtime"`
}

// VaultDepositApiSendChunkMultipartRequestBody defines body for VaultDepositApiSendChunk for multipart/form-data ContentType.
type VaultDepositApiSendChunkMultipartRequestBody VaultDepositApiSendChunkMultipartBody

// VaultDepositApiFinalizeDepositJSONRequestBody defines body for VaultDepositApiFinalizeDeposit for application/json ContentType.
type VaultDepositApiFinalizeDepositJSONRequestBody = FinalizeDepositRequest

// VaultDepositApiRegisterDepositJSONRequestBody defines body for VaultDepositApiRegisterDeposit for application/json ContentType.
type VaultDepositApiRegisterDepositJSONRequestBody = RegisterDeposit2Request

// VaultDepositApiTerminateDepositJSONRequestBody defines body for VaultDepositApiTerminateDeposit for application/json ContentType.
type VaultDepositApiTerminateDepositJSONRequestBody = TerminateDepositRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// VaultDepositApiHasChunk request
	VaultDepositApiHasChunk(ctx context.Context, params *VaultDepositApiHasChunkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VaultDepositApiSendChunk request with any body
	VaultDepositApiSendChunkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VaultDepositApiFinalizeDeposit request with any body
	VaultDepositApiFinalizeDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VaultDepositApiFinalizeDeposit(ctx context.Context, body VaultDepositApiFinalizeDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VaultDepositApiRegisterDeposit request with any body
	VaultDepositApiRegisterDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VaultDepositApiRegisterDeposit(ctx context.Context, body VaultDepositApiRegisterDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VaultDepositApiTerminateDeposit request with any body
	VaultDepositApiTerminateDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VaultDepositApiTerminateDeposit(ctx context.Context, body VaultDepositApiTerminateDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) VaultDepositApiHasChunk(ctx context.Context, params *VaultDepositApiHasChunkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVaultDepositApiHasChunkRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VaultDepositApiSendChunkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVaultDepositApiSendChunkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VaultDepositApiFinalizeDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVaultDepositApiFinalizeDepositRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VaultDepositApiFinalizeDeposit(ctx context.Context, body VaultDepositApiFinalizeDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVaultDepositApiFinalizeDepositRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VaultDepositApiRegisterDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVaultDepositApiRegisterDepositRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VaultDepositApiRegisterDeposit(ctx context.Context, body VaultDepositApiRegisterDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVaultDepositApiRegisterDepositRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VaultDepositApiTerminateDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVaultDepositApiTerminateDepositRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VaultDepositApiTerminateDeposit(ctx context.Context, body VaultDepositApiTerminateDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVaultDepositApiTerminateDepositRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewVaultDepositApiHasChunkRequest generates requests for VaultDepositApiHasChunk
func NewVaultDepositApiHasChunkRequest(server string, params *VaultDepositApiHasChunkParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/deposits/v2/chunk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depositId", runtime.ParamLocationQuery, params.DepositId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowIdentifier", runtime.ParamLocationQuery, params.FlowIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowFilename", runtime.ParamLocationQuery, params.FlowFilename); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowRelativePath", runtime.ParamLocationQuery, params.FlowRelativePath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowChunkNumber", runtime.ParamLocationQuery, params.FlowChunkNumber); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowChunkSize", runtime.ParamLocationQuery, params.FlowChunkSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowCurrentChunkSize", runtime.ParamLocationQuery, params.FlowCurrentChunkSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowTotalSize", runtime.ParamLocationQuery, params.FlowTotalSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowTotalChunks", runtime.ParamLocationQuery, params.FlowTotalChunks); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowMimetype", runtime.ParamLocationQuery, params.FlowMimetype); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flowUserMtime", runtime.ParamLocationQuery, params.FlowUserMtime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVaultDepositApiSendChunkRequestWithBody generates requests for VaultDepositApiSendChunk with any type of body
func NewVaultDepositApiSendChunkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/deposits/v2/chunk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVaultDepositApiFinalizeDepositRequest calls the generic VaultDepositApiFinalizeDeposit builder with application/json body
func NewVaultDepositApiFinalizeDepositRequest(server string, body VaultDepositApiFinalizeDepositJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVaultDepositApiFinalizeDepositRequestWithBody(server, "application/json", bodyReader)
}

// NewVaultDepositApiFinalizeDepositRequestWithBody generates requests for VaultDepositApiFinalizeDeposit with any type of body
func NewVaultDepositApiFinalizeDepositRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/deposits/v2/finalize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVaultDepositApiRegisterDepositRequest calls the generic VaultDepositApiRegisterDeposit builder with application/json body
func NewVaultDepositApiRegisterDepositRequest(server string, body VaultDepositApiRegisterDepositJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVaultDepositApiRegisterDepositRequestWithBody(server, "application/json", bodyReader)
}

// NewVaultDepositApiRegisterDepositRequestWithBody generates requests for VaultDepositApiRegisterDeposit with any type of body
func NewVaultDepositApiRegisterDepositRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/deposits/v2/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVaultDepositApiTerminateDepositRequest calls the generic VaultDepositApiTerminateDeposit builder with application/json body
func NewVaultDepositApiTerminateDepositRequest(server string, body VaultDepositApiTerminateDepositJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVaultDepositApiTerminateDepositRequestWithBody(server, "application/json", bodyReader)
}

// NewVaultDepositApiTerminateDepositRequestWithBody generates requests for VaultDepositApiTerminateDeposit with any type of body
func NewVaultDepositApiTerminateDepositRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/deposits/v2/terminate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// VaultDepositApiHasChunk request
	VaultDepositApiHasChunkWithResponse(ctx context.Context, params *VaultDepositApiHasChunkParams, reqEditors ...RequestEditorFn) (*VaultDepositApiHasChunkResponse, error)

	// VaultDepositApiSendChunk request with any body
	VaultDepositApiSendChunkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VaultDepositApiSendChunkResponse, error)

	// VaultDepositApiFinalizeDeposit request with any body
	VaultDepositApiFinalizeDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VaultDepositApiFinalizeDepositResponse, error)

	VaultDepositApiFinalizeDepositWithResponse(ctx context.Context, body VaultDepositApiFinalizeDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*VaultDepositApiFinalizeDepositResponse, error)

	// VaultDepositApiRegisterDeposit request with any body
	VaultDepositApiRegisterDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VaultDepositApiRegisterDepositResponse, error)

	VaultDepositApiRegisterDepositWithResponse(ctx context.Context, body VaultDepositApiRegisterDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*VaultDepositApiRegisterDepositResponse, error)

	// VaultDepositApiTerminateDeposit request with any body
	VaultDepositApiTerminateDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VaultDepositApiTerminateDepositResponse, error)

	VaultDepositApiTerminateDepositWithResponse(ctx context.Context, body VaultDepositApiTerminateDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*VaultDepositApiTerminateDepositResponse, error)
}

type VaultDepositApiHasChunkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VaultDepositApiHasChunkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VaultDepositApiHasChunkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VaultDepositApiSendChunkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VaultDepositApiSendChunkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VaultDepositApiSendChunkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VaultDepositApiFinalizeDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VaultDepositApiFinalizeDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VaultDepositApiFinalizeDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VaultDepositApiRegisterDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegisterDeposit2Response
}

// Status returns HTTPResponse.Status
func (r VaultDepositApiRegisterDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VaultDepositApiRegisterDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VaultDepositApiTerminateDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VaultDepositApiTerminateDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VaultDepositApiTerminateDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// VaultDepositApiHasChunkWithResponse request returning *VaultDepositApiHasChunkResponse
func (c *ClientWithResponses) VaultDepositApiHasChunkWithResponse(ctx context.Context, params *VaultDepositApiHasChunkParams, reqEditors ...RequestEditorFn) (*VaultDepositApiHasChunkResponse, error) {
	rsp, err := c.VaultDepositApiHasChunk(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVaultDepositApiHasChunkResponse(rsp)
}

// VaultDepositApiSendChunkWithBodyWithResponse request with arbitrary body returning *VaultDepositApiSendChunkResponse
func (c *ClientWithResponses) VaultDepositApiSendChunkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VaultDepositApiSendChunkResponse, error) {
	rsp, err := c.VaultDepositApiSendChunkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVaultDepositApiSendChunkResponse(rsp)
}

// VaultDepositApiFinalizeDepositWithBodyWithResponse request with arbitrary body returning *VaultDepositApiFinalizeDepositResponse
func (c *ClientWithResponses) VaultDepositApiFinalizeDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VaultDepositApiFinalizeDepositResponse, error) {
	rsp, err := c.VaultDepositApiFinalizeDepositWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVaultDepositApiFinalizeDepositResponse(rsp)
}

func (c *ClientWithResponses) VaultDepositApiFinalizeDepositWithResponse(ctx context.Context, body VaultDepositApiFinalizeDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*VaultDepositApiFinalizeDepositResponse, error) {
	rsp, err := c.VaultDepositApiFinalizeDeposit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVaultDepositApiFinalizeDepositResponse(rsp)
}

// VaultDepositApiRegisterDepositWithBodyWithResponse request with arbitrary body returning *VaultDepositApiRegisterDepositResponse
func (c *ClientWithResponses) VaultDepositApiRegisterDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VaultDepositApiRegisterDepositResponse, error) {
	rsp, err := c.VaultDepositApiRegisterDepositWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVaultDepositApiRegisterDepositResponse(rsp)
}

func (c *ClientWithResponses) VaultDepositApiRegisterDepositWithResponse(ctx context.Context, body VaultDepositApiRegisterDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*VaultDepositApiRegisterDepositResponse, error) {
	rsp, err := c.VaultDepositApiRegisterDeposit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVaultDepositApiRegisterDepositResponse(rsp)
}

// VaultDepositApiTerminateDepositWithBodyWithResponse request with arbitrary body returning *VaultDepositApiTerminateDepositResponse
func (c *ClientWithResponses) VaultDepositApiTerminateDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VaultDepositApiTerminateDepositResponse, error) {
	rsp, err := c.VaultDepositApiTerminateDepositWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVaultDepositApiTerminateDepositResponse(rsp)
}

func (c *ClientWithResponses) VaultDepositApiTerminateDepositWithResponse(ctx context.Context, body VaultDepositApiTerminateDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*VaultDepositApiTerminateDepositResponse, error) {
	rsp, err := c.VaultDepositApiTerminateDeposit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVaultDepositApiTerminateDepositResponse(rsp)
}

// ParseVaultDepositApiHasChunkResponse parses an HTTP response from a VaultDepositApiHasChunkWithResponse call
func ParseVaultDepositApiHasChunkResponse(rsp *http.Response) (*VaultDepositApiHasChunkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VaultDepositApiHasChunkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVaultDepositApiSendChunkResponse parses an HTTP response from a VaultDepositApiSendChunkWithResponse call
func ParseVaultDepositApiSendChunkResponse(rsp *http.Response) (*VaultDepositApiSendChunkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VaultDepositApiSendChunkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVaultDepositApiFinalizeDepositResponse parses an HTTP response from a VaultDepositApiFinalizeDepositWithResponse call
func ParseVaultDepositApiFinalizeDepositResponse(rsp *http.Response) (*VaultDepositApiFinalizeDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VaultDepositApiFinalizeDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVaultDepositApiRegisterDepositResponse parses an HTTP response from a VaultDepositApiRegisterDepositWithResponse call
func ParseVaultDepositApiRegisterDepositResponse(rsp *http.Response) (*VaultDepositApiRegisterDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VaultDepositApiRegisterDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegisterDeposit2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVaultDepositApiTerminateDepositResponse parses an HTTP response from a VaultDepositApiTerminateDepositWithResponse call
func ParseVaultDepositApiTerminateDepositResponse(rsp *http.Response) (*VaultDepositApiTerminateDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VaultDepositApiTerminateDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
